@page "/gameofthemonth"
@using ESOF.WebApp.DBLayer.Entities
@using Frontend.Services
@using ESOF.WebApp.DBLayer.Dto
@inject HttpClient Http
@inject VoteService VoteService

<h3>Vote no Jogo do MÃªs</h3>

@if (games == null)
{
    <p>Carregando...</p>
}
else if (!games.Any())
{
    <p>Nenhum jogo encontrado.</p>
}
else
{
    <form onsubmit="HandleSubmit">
        <ul>
            @foreach (var game in games)
            {
                <li>
                    <label>
                        <input type="radio" name="selectedGame" value="@game.GameId" @onchange="() => selectedGameId = game.GameId" />
                        <b>@game.Name</b> - @game.Description
                    </label>
                    @if (votePercentages.TryGetValue(game.GameId, out var percentage))
                    {
                        <span>(@percentage%)</span>
                    }
                </li>
            }
        </ul>
        <button type="submit" disabled="@hasVoted">Submeter Voto</button>
    </form>
}

<p>@message</p>

@code {
    private List<Game> games;
    private string message;
    private Guid userId = new Guid("0510fc34-10ab-4b30-89e5-f9df85116f27");
    private bool hasVoted = false;
    private Dictionary<Guid, double> votePercentages = new();
    private bool isVotingPeriod = false;
    private Guid selectedGameId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            games = await Http.GetFromJsonAsync<List<Game>>("api/game");
            hasVoted = await CheckIfUserHasVoted();
            isVotingPeriod = IsVotingPeriod();
            if (games == null)
            {
                message = "Nenhum jogo foi retornado da API.";
            }
            else
            {
                await UpdateVotePercentages();
            }
        }
        catch (Exception ex)
        {
            message = "Erro ao carregar os jogos: " + ex.Message;
        }
    }

    private bool IsVotingPeriod()
    {
        var today = DateTime.Now;
        var lastDayOfMonth = new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month));
        var firstVotingDay = lastDayOfMonth.AddDays(-4);
        return today >= firstVotingDay;
    }

    private async Task<bool> CheckIfUserHasVoted()
    {
        return await Http.GetFromJsonAsync<bool>($"api/vote/HasVoted/{userId}");
    }

    private async Task HandleSubmit()
    {
        // Prevent default form submission
        await Task.Delay(1);

        var voteDTO = new VoteDTO
        {
            UserId = userId,
            GameId = selectedGameId,
            VoteTime = DateTime.Now
        };

        try
        {
            bool result = await VoteService.PostVoteAsync(voteDTO);

            if (result)
            {
                message = "Voto registrado com sucesso!";
                hasVoted = true; // Prevent user from voting again
                await UpdateVotePercentages(); // Update vote percentages after a new vote is registered
            }
            else
            {
                message = "Falha ao registrar o voto.";
            }
        }
        catch (Exception ex)
        {
            message = $"Erro ao registrar o voto: {ex.Message}";
        }
    }

    private async Task UpdateVotePercentages()
    {
        var voteCounts = await Http.GetFromJsonAsync<Dictionary<Guid, int>>("api/vote/Counts");
        if (voteCounts != null)
        {
            var totalVotes = voteCounts.Values.Sum();
            foreach (var game in games)
            {
                votePercentages[game.GameId] = voteCounts.TryGetValue(game.GameId, out var count) ? (double)count / totalVotes * 100 : 0;
            }
        }
    }
}








