@page "/gameofthemonth"
@using ESOF.WebApp.DBLayer.Entities
@using Frontend.Services
@using ESOF.WebApp.DBLayer.Dto
@using System.Security.Claims
@inject HttpClient Http
@inject VoteService VoteService
@inject IHttpContextAccessor HttpContextAccessor

<h3>Vote no Jogo do Mês</h3>

@if (games == null)
{
    <p>Carregando...</p>
}
else if (!games.Any())
{
    <p>Nenhum jogo encontrado.</p>
}
else
{
    <ul class="game-list">
        @foreach (var game in games)
        {
            <li class="game-item">
                <label>
                    <a href="/votes" @onclick="() => HandleSubmit(game.GameId, userId)">
                        <span class="game-name"><b>@game.Name</b></span>
                    </a> - <span class="game-description">@game.Description</span>
                </label>
                @if (votePercentages.TryGetValue(game.GameId, out var percentage))
                {
                    <span class="game-percentage">(@percentage.ToString("0.##")%)</span>
                }
            </li>
        }
    </ul>
}

<p>@message</p>

@code {
    private List<Game> games;
    private string message;
    private Guid userId;
    private bool hasVoted = false;
    private Dictionary<Guid, double> votePercentages = new();
    private bool isVotingPeriod = false;
    private Guid selectedGameId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = HttpContextAccessor.HttpContext.User;
            if (user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    userId = Guid.Parse(userIdClaim.Value);
                }
            }

            games = await Http.GetFromJsonAsync<List<Game>>("api/game");
            hasVoted = await CheckIfUserHasVoted();
            isVotingPeriod = IsVotingPeriod();
            if (games == null)
            {
                message = "Nenhum jogo foi retornado da API.";
            }
            else
            {
                await UpdateVotePercentages();
            }
        }
        catch (Exception ex)
        {
            message = "Erro ao carregar os jogos: " + ex.Message;
        }
    }

    private bool IsVotingPeriod()
    {
        var today = DateTime.Now;
        var lastDayOfMonth = new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month));
        var firstVotingDay = lastDayOfMonth.AddDays(-4);
        return today >= firstVotingDay;
    }

    private async Task<bool> CheckIfUserHasVoted()
    {
        return await Http.GetFromJsonAsync<bool>($"api/vote/HasVoted/{userId}");
    }

    private async Task HandleSubmit(Guid gameId, Guid userId)
    {
        if (hasVoted || !isVotingPeriod)
        {
            message = "Você já votou ou a votação não está aberta.";
            return;
        }

        var voteDto = new VoteDTO
        {
            UserId = userId,
            GameId = gameId,
            VoteTime = DateTime.Now
        };

        try
        {
            bool result = await VoteService.PostVoteAsync(voteDto);

            if (result)
            {
                message = "Voto registado com sucesso!";
                hasVoted = true; // Prevent user from voting again
                await UpdateVotePercentages(); // Update vote percentages after a new vote is registered
            }
            else
            {
                message = "Falha ao registar o voto.";
            }
        }
        catch (Exception ex)
        {
            message = $"Erro ao registar o voto: {ex.Message}";
        }
    }

    private async Task UpdateVotePercentages()
    {
        var voteCounts = await Http.GetFromJsonAsync<Dictionary<Guid, int>>("api/vote/Counts");
        if (voteCounts != null)
        {
            var totalVotes = voteCounts.Values.Sum();
            foreach (var game in games)
            {
                votePercentages[game.GameId] = voteCounts.TryGetValue(game.GameId, out var count) ? (double)count / totalVotes * 100 : 0;
            }
        }
    }
}















