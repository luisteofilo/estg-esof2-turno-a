@page "/game/{gameid}/reviews"
@rendermode InteractiveServer
@using Frontend.Helpers
@using Microsoft.Extensions.Logging.Console
@inject ApiHelper ApiHelper

@code
{
    [Parameter] public string? GameId { get; set; }
}

<PageTitle>Reviews</PageTitle>

@if (_game != null)
{
    <h1>Reviews from @_game.Name</h1>
}
else
{
    <h1>Loading...</h1>
}


<div class="row">
    <div class="reviews-section">

        <!-- Critic Scores -->
        <div class="critic-scores">
            <h3>Critic Scores</h3>

            <!-- Display the critic score -->
            <div class="critic-score">
                <!-- Number contained in a colored square -->
                <div class="square green"> <!-- Change the class name based on the score -->
                    <h4><span class="score-placeholder">7</span> Average</h4>
                </div>
            </div>

            <!-- Visual representation with bars -->
            <div class="score-bars">
                <div class="bar bad-bar" style="width: 30%;"></div> <!-- Placeholder for bad scores -->
                <div class="bar avg-bar" style="width: 40%;"></div> <!-- Placeholder for average scores -->
                <div class="bar good-bar" style="width: 30%;"></div> <!-- Placeholder for good scores -->
            </div>
        </div>




        <!-- User Scores -->
        <div class="user-scores">
            <h3>User Scores</h3>

            <!-- Display the user score -->
            <div class="user-score">
                <!-- Number contained in a colored circle -->
                <div class="@GetCollorMedia(_media)"> <!-- Change the class name based on the score -->
                    <h4><span class="score-placeholder">@_media</span> @GetMediaLabel(_media)</h4>
                </div>
            </div>

            <!-- Visual representation with bars -->
            @if (_countReviews>0)
            {
                <div class="score-bars">
                    <div class="bar bad-bar" style="width: @GetBarPercentage(_badReviews, _countReviews)%;"></div> <!-- Placeholder for bad scores -->
                    <div class="bar avg-bar" style="width: @GetBarPercentage(_averageReviews, _countReviews)%;"></div> <!-- Placeholder for average scores -->
                    <div class="bar good-bar" style="width: @GetBarPercentage(_goodReviews, _countReviews)%;"></div> <!-- Placeholder for good scores -->
                </div>
            }
            else
            {
                <div class="score-bars">
                    <div class="bar bad-bar" style="width: 30%;"></div> <!-- Placeholder for bad scores -->
                    <div class="bar avg-bar" style="width: 40%;"></div> <!-- Placeholder for average scores -->
                    <div class="bar good-bar" style="width: 30%;"></div> <!-- Placeholder for good scores -->
                </div>
            }
        </div>

        <div class="latest-reviews card">
            <h3 class="card-header">Latest Reviews</h3>
            <div class="card-body">
                <div class="row">
                    <!-- Latest Critic Reviews -->
                    <div class="col-md-6">
                        <h4>Critic Reviews</h4>
                        <div class="review-filters">
                            <label for="critic-filter">Filter by:</label>
                            <select id="critic-filter" class="form-select" onchange="filterReviews('critic')">
                                <option value="all">All</option>
                                <option value="good">Good</option>
                                <option value="average">Average</option>
                                <option value="bad">Bad</option>
                            </select>
                        </div>
                        <div id="critic-reviews">
                            <!-- Placeholder for reviews, dynamically filtered -->
                            <div class="review card mb-3" data-rating="good">
                                <div class="card-body">
                                    <div class="review-score square green">
                                        <span>9</span>
                                    </div>
                                    <div class="review-comment">
                                        <p>"An outstanding game with immersive gameplay!"</p>
                                    </div>
                                </div>
                            </div>
                            <div class="review card mb-3" data-rating="average">
                                <div class="card-body">
                                    <div class="review-score square yellow">
                                        <span>6</span>
                                    </div>
                                    <div class="review-comment">
                                        <p>"Decent, but there's room for improvement."</p>
                                    </div>
                                </div>
                            </div>
                            <div class="review card mb-3" data-rating="bad">
                                <div class="card-body">
                                    <div class="review-score square red">
                                        <span>3</span>
                                    </div>
                                    <div class="review-comment">
                                        <p>"Failed to meet expectations in many areas."</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Latest User Reviews -->
                    <div class="col-md-6">
                        <h4>User Reviews</h4>
                        <div class="review-filters">
                            <label for="user-filter">Filter by:</label>
                            <select id="user-filter" class="form-select" @onchange="HandleFilterChange">
                                <option value="all">All</option>
                                <option value="good">Good</option>
                                <option value="average">Average</option>
                                <option value="bad">Bad</option>
                            </select>
                        </div>
                        <div id="user-reviews">
                            <!-- Placeholder for reviews, dynamically filtered -->
                            @if (_reviews != null)
                            {
                                foreach (var review in FilteredReviews(currentFilter))
                                {
                                    <div class="review card mb-3" data-rating="good">
                                        <div class="card-body">
                                            <div class="@GetCollorReview(review.Evaluation)">
                                                <span>@review.Evaluation</span>
                                            </div>
                                            <div class="review-comment">
                                                <p>@review.Comment</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    @code {
                        private string currentFilter = "all";

                        private void HandleFilterChange(ChangeEventArgs args)
                        {
                            currentFilter = args.Value?.ToString() ?? "all";
                        }
                    }
                    
                </div>
            </div>
        </div>
    </div>
</div>


@code{

    public class Reviews
    {
        public string ReviewId { get; set; } = "";
        public string Comment { get; set; } = "";
        public int Evaluation { get; set; } = 0;
        public string UserId { get; set; } = "";
        public string GameId { get; set; } = "";
    }

    public class Game
    {
        public string GameId { get; set; } = "";
        public string Name { get; set; } = "";
    }
    
    double _media;
    int _total;
    int _countReviews;

    int _goodReviews;
    int _averageReviews;
    int _badReviews;

    
    private Reviews[]? _reviews;
    private Game? _game;

    protected override async Task OnInitializedAsync()
    {
        _reviews = await ApiHelper.GetFromApiAsync<Reviews[]>($"/Reviews/{GameId}");
        _game = await ApiHelper.GetFromApiAsync<Game>($"/Games/{GameId}");

        if (_reviews != null)
        {
            Array.Reverse(_reviews);
            
            foreach (var rev in _reviews)
            {
                    if (rev.GameId.Equals(GameId))
                    {
                        _countReviews++;
                        _total += rev.Evaluation;
                        switch (rev.Evaluation)
                        {
                            case <5 :
                                _badReviews++;
                                break;
                            case >= 5 and < 7:
                                _averageReviews++;
                                break;
                            case >= 7:
                                _goodReviews++;
                                break;
                        }
                    }
            }
            
            _media = Math.Round((double)_total / _countReviews, 1);
        }
    }

    private string GetCollorMedia(double score)
    {
        switch (score)
        {
            case <4.5 :
                return "circle red";
            case >=4.5 and <= 7:
                return "circle yellow";
            case > 7:
                return "circle green";
            default:
                return "";
        }
    }
    
    private string GetMediaLabel(double media)
    {
        switch (media)
        {
            case <4.5 :
                return "Bad";
            case >=4.5 and <= 7:
                return "Average";
            case > 7:
                return "Great";
            default:
                return "";
        }
    }

    private string GetCollorReview(int nota)
    {
        switch (nota)
        {
            case <5 :
                return "review-score circle red";
            case >= 5 and < 7:
                return "review-score circle yellow";
            case >= 7:
                return "review-score circle green";
        }
    }

    private int GetBarPercentage(int parcela, int total)
    {
        if (total != 0)
        {
            int percentagem = (int)Math.Round((total / (double)parcela) * 100);
            return percentagem;
        }
        
        return 0;
    }
    
    private IEnumerable<Reviews> FilteredReviews(string filter)
    {
        if (_reviews == null)
            return Enumerable.Empty<Reviews>();

        switch (filter)
        {
            case "good":
                return _reviews.Where(r => r.Evaluation >= 7);
            case "average":
                return _reviews.Where(r => r.Evaluation >= 5 && r.Evaluation < 7);
            case "bad":
                return _reviews.Where(r => r.Evaluation < 5);
            case "all":
            default:
                return _reviews;
        }
    }
}