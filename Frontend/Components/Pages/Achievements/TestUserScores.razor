@page "/scoreAchievements"
@using Frontend.Helpers
@using global::Helpers.Models
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
@rendermode InteractiveServer

<PageTitle>Test Challenge</PageTitle>

<h1>Test Challenge Leaderboard</h1>
<h3>Objective: Achieve the highest possible score</h3>

<h2>Submit Score</h2>
<div>
    <label for="score">Score: </label>
    <input id="score" type="number" @bind="score" />
</div>

@if (_new_score == null)
{
<p>
    <em>Loading...</em>
</p>
}
else
{
<table class="table">
    <thead>
    <tr>
        <th>Select</th>
        <th>Email</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in _new_score)
    {
    <tr>
        <td>
            <input type="radio" name="selectedUser" value="@user.UserId" @onchange="@(e => selectedUserId = user.UserId)" />
        </td>
        
        <td>@user.Email</td>
    </tr>
    }
    </tbody>
</table>
}

<button @onclick="SaveScore" class="save-btn-testScores">Save</button>
@code
{
    private string apiUrl = $"/achievements/5cc030f2-377f-475b-a4fa-fd20cfa46ff1";
    private UserViewModel[]? _new_score;
    private AchievementsViewModel[]? _achievementsScore;
    private PlayerAchievementsViewModel[]? _playerAchievements;
    private AchievementsViewModel[]? _achievements;
    private long score;
    private Guid selectedUserId;

    protected override async Task OnInitializedAsync()
    {
        _new_score = await ApiHelper.GetFromApiAsync<UserViewModel[]>("/users");
    }

    private async Task SaveScore()
    {
        if (selectedUserId == Guid.Empty)
        {
            return;
        }

        var data = new
        {
            UserId = selectedUserId,
            Score = score
        };

       var success =  await ApiHelper.PostToApiAsync($"api/Achievements/SaveScore/{selectedUserId}/{score}", new { });

       if (success != null)
       {
           _achievementsScore = await ApiHelper.GetFromApiAsync<AchievementsViewModel[]>($"api/Achievements/ScoreAchievements/{score}");
           _playerAchievements = await ApiHelper.GetFromApiAsync<PlayerAchievementsViewModel[]>($"api/Achievements/UserAchievements/{selectedUserId}");

           foreach (var achievement in _achievementsScore)
           {
               if (!_playerAchievements.Any(pa => pa.AchievementId == achievement.IdAchievement))
               {
                   await ApiHelper.PostToApiAsync($"api/Achievements/PlayerAchievements/{selectedUserId}/{achievement.IdAchievement}", new { });
               }
           }
       }
    }
}
