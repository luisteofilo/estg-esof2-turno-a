@page "/scoreAchievements"
@using Frontend.Helpers
@using global::Helpers.Models
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
@rendermode InteractiveServer

<PageTitle>Test Challenge</PageTitle>

<h1>Test Challenge Leaderboard</h1>
<h3>Achieve the highest possible score</h3>

<h2>Submit Score</h2>
<div>
    <label for="score">Score: </label>
    <input id="score" type="number" @bind="score" />
</div>

@if (_new_score == null)
{
<p>
    <em>Loading...</em>
</p>
}
else
{
<table class="table">
    <thead>
    <tr>
        <th>Select</th>
        <th>User ID</th>
        <th>Email</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in _new_score)
    {
    <tr>
        <td>
            <input type="radio" name="selectedUser" value="@user.UserId" @onchange="@(e => selectedUserId = user.UserId)" />
        </td>
        
        <td>@user.UserId</td>
        <td>@user.Email</td>
    </tr>
    }
    </tbody>
</table>
}

<button @onclick="SaveScore">Save</button>
@code
{
    private string apiUrl = $"/achievements/5cc030f2-377f-475b-a4fa-fd20cfa46ff1";
    private UserViewModel[]? _new_score;
    private int score;
    private Guid selectedUserId;

    protected override async Task OnInitializedAsync()
    {
        _new_score = await ApiHelper.GetFromApiAsync<UserViewModel[]>("/users");
    }

    private async Task SaveScore()
    {
        if (selectedUserId == Guid.Empty)
        {
            return;
        }

        var data = new
        {
            UserId = selectedUserId,
            Score = score
        };

       bool success =  await ApiHelper.PostToApiAsync("/save_score", data);
    }
}
