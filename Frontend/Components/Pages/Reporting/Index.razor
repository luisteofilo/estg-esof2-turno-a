@page "/reporting"
@using Frontend.Helpers
@attribute [StreamRendering]
@inject ApiHelper ApiHelper

<PageTitle>Game Reporting</PageTitle>
<div class="col-md-10 offset-md-1 mb-5">
    <h1>Game Reporting</h1>
</div>

@if (_games == null)
{
    <p class="col-md-10 offset-md-1 mb-5">
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row">
        <div class="col-10">
            <ul class="nav nav-underline mb-3" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Games</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="fav-tab" data-bs-toggle="tab" data-bs-target="#fav-tab-pane" type="button" role="tab" aria-controls="fav-tab-pane" aria-selected="false">Favorites</button>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
                    <div class="cardsGames row">
                        @foreach (var game in _games)
                        {
                            <div class="col-md-3 mb-4">
                                <div class="card position-relative">
                                    <div class="card-body">
                                        <h5 class="card-title">@game.Name</h5>
                                        <p class="card-text">@game.Genre - @game.Platform</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="tab-pane fade" id="fav-tab-pane" role="tabpanel" aria-labelledby="fav-tab" tabindex="0">
                    <div class="cardsGames row">
                        @foreach (var game in _games)
                        {
                            <div class="col-md-3 mb-4">
                                <div class="card position-relative">
                                    <div class="card-body">
                                        <h5 class="card-title">@game.Name</h5>
                                        <p class="card-text">@game.Genre - @game.Platform</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-2">
            <div class="menuFilters mb-5">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="m-0">Filters</h5>
                    <button type="button" class="btn btn-danger" @onclick="ClearFilters">Clear</button>
                </div>
                <div class="dropdownFilters">
                    <select @onchange="FilterGames" class="form-select mb-3">
                        <option value="">Select Genre</option>
                        @foreach (var genre in _genres)
                        {
                            <option value="@genre">@genre</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Game>? _games;
    private List<Game>? _allGames;
    private List<string> _genres = new List<string>();

    protected override void OnInitialized()
    {
        // Dados Tempor√°rios
        _games = new List<Game>
        {
            new Game { Name = "Game 1", Genre = "Action", Platform = "PC", ReleaseDate = DateTime.Parse("2021-01-01") },
            new Game { Name = "Game 2", Genre = "Adventure", Platform = "PS4", ReleaseDate = DateTime.Parse("2022-05-15") },
            new Game { Name = "Game 3", Genre = "RPG", Platform = "Xbox One", ReleaseDate = DateTime.Parse("2020-11-10") },
            new Game { Name = "Game 4", Genre = "Strategy", Platform = "PC", ReleaseDate = DateTime.Parse("2019-09-01") }
        };

        _allGames = _games;
        _genres = _games.Select(g => g.Genre).Distinct().ToList();
    }

    private void ClearFilters()
    {
        _games = _allGames;
    }

    private void FilterGames(ChangeEventArgs e)
    {
        var selectedGenre = e.Value.ToString();
        if (!string.IsNullOrEmpty(selectedGenre))
        {
            _games = _allGames.Where(g => g.Genre == selectedGenre).ToList();
        }
        else
        {
            _games = _allGames;
        }
    }

    public class Game
    {
        public string Name { get; set; }
        public string Genre { get; set; }
        public string Platform { get; set; }
        public DateTime ReleaseDate { get; set; }
    }
}
