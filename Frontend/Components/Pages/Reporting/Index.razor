@page "/reporting"
@using Frontend.Helpers
@attribute [StreamRendering]
@inject ApiHelper ApiHelper

<PageTitle>Game Reporting</PageTitle>
<div class="col-md-10 offset-md-1 mb-5 text-center">
    <h1>Game Reporting</h1>
</div>

@if (_games == null)
{
    <p class="col-md-10 offset-md-1 mb-5 text-center">
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="menuFilters mb-5">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="m-0">Filters</h5>
                    <button type="button" class="btn btn-danger" @onclick="ClearFilters">Clear</button>
                </div>
                <div class="dropdownFilters">
                    <input type="text" @bind="NameFilter" class="form-control mb-3" placeholder="Search by Name" />
                    <select @bind="GenreFilter" class="form-select mb-3">
                        <option value="">Select Genre</option>
                        @foreach (var genre in _genres)
                        {
                            <option value="@genre">@genre</option>
                        }
                    </select>
                    <select @bind="PlatformFilter" class="form-select mb-3">
                        <option value="">Select Platform</option>
                        @foreach (var platform in _platforms)
                        {
                            <option value="@platform">@platform</option>
                        }
                    </select>
                    <input type="date" @bind="ReleaseDateFilter" class="form-control mb-3" />
                    <button type="button" class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-10 offset-md-1 mb-5 text-center">
        <h2>Games:</h2>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="cardsGames row">
                @foreach (var game in _games)
                {
                    <div class="col-md-3 mb-4">
                        <div class="card position-relative">
                            <div class="card-body">
                                <h5 class="card-title">@game.Name</h5>
                                <p class="card-text">@game.Genre - @game.Platform</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Game>? _games;
    private List<Game>? _allGames;
    private List<string> _genres = new List<string>();
    private List<string> _platforms = new List<string>();
    private string NameFilter { get; set; }
    private string GenreFilter { get; set; }
    private string PlatformFilter { get; set; }
    private DateTime? ReleaseDateFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Dados Tempor√°rios
        _games = new List<Game>
        {
            new Game { Name = "Game 1", Genre = "Action", Platform = "PC", ReleaseDate = DateTime.Parse("2021-01-01") },
            new Game { Name = "Game 2", Genre = "Adventure", Platform = "PS4", ReleaseDate = DateTime.Parse("2022-05-15") },
            new Game { Name = "Game 3", Genre = "RPG", Platform = "Xbox One", ReleaseDate = DateTime.Parse("2020-11-10") },
            new Game { Name = "Game 4", Genre = "Strategy", Platform = "PC", ReleaseDate = DateTime.Parse("2019-09-01") }
        };

        _allGames = _games.ToList(); // Make a copy of the initial data
        _genres = _games.Select(g => g.Genre).Distinct().ToList();
        _platforms = _games.Select(g => g.Platform).Distinct().ToList();

        // Dados da API (quando estiver pronto a usar)
        // _allGames = await ApiHelper.GetFromApiAsync<List<Game>>("api/gamereport/order");
        // _games = _allGames.ToList();
        // _genres = _allGames.Select(g => g.Genre).Distinct().ToList();
        // _platforms = _allGames.Select(g => g.Platform).Distinct().ToList();
    }

    private async Task ApplyFilters()
    {
        // Start with the full list of games
        _games = _allGames.ToList();

        if (!string.IsNullOrEmpty(GenreFilter))
        {
            _games = _games.Where(g => g.Genre == GenreFilter).ToList();
        }

        if (!string.IsNullOrEmpty(PlatformFilter))
        {
            _games = _games.Where(g => g.Platform == PlatformFilter).ToList();
        }

        if (!string.IsNullOrEmpty(NameFilter))
        {
            _games = _games.Where(g => g.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (ReleaseDateFilter.HasValue)
        {
            _games = _games.Where(g => g.ReleaseDate.Date == ReleaseDateFilter.Value.Date).ToList();
        }

        StateHasChanged();
    }

    private void ClearFilters()
    {
        NameFilter = string.Empty;
        GenreFilter = string.Empty;
        PlatformFilter = string.Empty;
        ReleaseDateFilter = null;
        
        // Redefinir _games para _allGames antes de aplicar os filtros
        _games = _allGames.ToList();

        StateHasChanged();
    }

    public class Game
    {
        public string Name { get; set; }
        public string Genre { get; set; }
        public string Platform { get; set; }
        public DateTime ReleaseDate { get; set; }
    }
}
