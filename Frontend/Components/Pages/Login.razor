@page "/"
@layout LoginLayout

@inject HttpClient Http
@using ESOF.WebApp.DBLayer.Entities
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@rendermode InteractiveServer

<div>
    <body>
    <div class="login-container">
        <h1>RETROGAMING</h1>
        <img src="Imgs/retro-gaming-logo.png" alt="Game Icon">
        <h2>SIGN IN</h2>
        <form class="new-form">
            <div class="new-form">
                <text>Email</text>
                <input type="email" @bind="UserDto.Email" class="inputs" required>
                <div class="password-container">
                    <span>Password</span>
                </div>
                <input type="password" id="password" @bind="UserDto.Password" class="inputs" required>
                <button type="submit" @onclick="HandleLogin">LOGIN</button>
            </div>
        </form>
        <div class="register-link">
            <text>Don't have an account? <a href="/register">Register</a></text>
        </div>
    </div>
    </body>
</div>


@code
{
    [SupplyParameterFromForm] 
    public UserDTO UserDto { get; set; } = new ();
    
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    
    private string _emailError;
    private string _passwordError;
    private string loginMessage;
    
    protected override void OnInitialized()
    {
        UserDto = new UserDTO(); 
    }

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("HandleLogin called.");
            
            var context = new ValidationContext(UserDto);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(UserDto, context, validationResults, true);

            Console.WriteLine($"Validation Results: {isValid}");
            foreach (var validationResult in validationResults)
            {
                Console.WriteLine($"Validation Error: {validationResult.ErrorMessage}");
            }
            
            Console.WriteLine("Sending data to the API...");
            var response = await Http.PostAsJsonAsync("http://localhost:5295/logincontroller", UserDto);
            Console.WriteLine("API request sent.");

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                loginMessage = "Login successful!";
                
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, UserDto.Email),
                    new Claim(ClaimTypes.Email, UserDto.Email)
                };

                var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                await HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity));
            }
            else
            {
                loginMessage = "Login failed.";
            }

            Console.WriteLine($"API Response: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            loginMessage = "An error occurred while processing your request.";
        }
    }

}
