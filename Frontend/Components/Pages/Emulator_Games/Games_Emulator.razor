@page "/games"
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Reflection.Metadata
@using System.Text.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using Frontend.Helpers
@using global::Helpers.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApiHelper ApiHelper
@inject NavigationManager Navigation

<link href="Games_Emulator/Style/Games_Emulator.css"/>

<h1 class="text-center mt-4 retro-title">Games Emulator</h1>

<div id="top">
    <h1>EmulatorJS Demo</h1>
</div>

<div id="box">
    <input type="file" id="input">
    Drag ROM file or click here
</div>

<div class="container mt-5">
    <div style="width: 100%; height: 700px; overflow: hidden;">
        <div id="game"></div>
    </div>

    <h2 class="mt-5 retro-subtitle" style="text-align: left;">Explore Games:</h2>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card-scroll-container">
                @if (_games == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="card-deck">
                        @foreach (var game in _games)
                        {
                            <div class="card retro-card">
                                <img class="card-img-top img-fluid" src="@game.UrlImage" alt="@game.Name">
                                <div class="card-body">
                                    <h5 class="card-title retro-card-title">@game.Name</h5>
                                    <button class="btn btn-primary btn-block retro-btn" @onclick="() => PlayGame(game.GameId)">Play Now</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private GamesViewModel[] _games;

    protected override async Task OnInitializedAsync()
    {
        _games = await ApiHelper.GetFromApiAsync<GamesViewModel[]>("games");
        
    }
    private async Task PlayGame(Guid gameId)
    {
        var game = _games.FirstOrDefault(g => g.GameId == gameId);
        if (game != null)
        {

            var gameID = game.GameId;
            // ativar função js e passar paramentros do request para dentro da função
            var navigation = Navigation;
            var request_game = await Http.GetAsync($"http://${navigation}/games/${gameID}");
            if (request_game != null)
            {
                var content = await request_game.Content.ReadAsStringAsync();
                var gamesList = JsonSerializer.Deserialize<List<RomsViewModel>>(content);
                
                
                // variables to the emulator
                var url_cs = gamesList[0].ROM;
                var name_cs = gamesList[0].File_name;
                

                // Invoke JAVA SCRIPT
                
                await JSRuntime.InvokeVoidAsync("emulator_trigger", url_cs, name_cs);
                
            }
            else
            {
                Console.WriteLine("Game not found.");
            }

        }
        else
        {
            Console.WriteLine("Game not found.");
        }
    }
   
}

<script src="Games_Emulator/Script/Games_Emulator.js"></script>





