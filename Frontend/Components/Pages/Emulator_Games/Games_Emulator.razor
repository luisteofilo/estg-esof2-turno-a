@page "/games"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Frontend.Helpers
@using global::Helpers.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApiHelper ApiHelper

<h1 class="text-center mt-4 retro-title">Games Emulator</h1>

<div class="container mt-5">
    <div style="width: 100%; height: 700px; overflow: hidden;">
        <div id="game"></div>
    </div>

    <h2 class="mt-5 retro-subtitle" style="text-align: left;">Explore Games:</h2>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card-scroll-container">
                @if (_games == null)
                {
                <p><em>Loading...</em></p>
                }
                else
                {
                <div class="card-deck">
                    @foreach (var game in _games)
                    {
                    <div class="card retro-card">
                        <img class="card-img-top img-fluid" src="@game.UrlImage" alt="@game.Name">
                        <div class="card-body">
                            <h5 class="card-title retro-card-title">@game.Name</h5>
                            <button class="btn btn-primary btn-block retro-btn" @onclick="() => PlayGame(game)">Play Now</button>
                        </div>
                    </div>
                    }
                </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
private GamesViewModel[] _games;

protected override async Task OnInitializedAsync()
{
_games = await ApiHelper.GetFromApiAsync<GamesViewModel[]>("games");
}

private async Task PlayGame(GamesViewModel game)
{
if (game != null)
{
ConfigureEmulator(game.GameId); // Configura o emulador com o jogo selecionado
await StartEmulator(); // Inicia o emulador após a configuração
}
else
{
Console.WriteLine("Game not found.");
}
}

private void ConfigureEmulator(Guid gameId)
{
var emulatorBaseUrl = "https://www.emulatorjs.com";
var romUrl = $"{emulatorBaseUrl}/roms/{gameId}.nes"; // Constrói a URL da ROM dinamicamente
JSRuntime.InvokeVoidAsync("eval", $"window.EJS_gameUrl = '{romUrl}';");
}

private async Task StartEmulator()
{
// Chama a função JavaScript para iniciar o jogo no Emulator JS
await JSRuntime.InvokeVoidAsync("startGame");
}
}

<style>
    .card-scroll-container {
        overflow-x: auto;
        white-space: nowrap;
    }

    .card {
        width: 18rem;
        display: inline-block;
        margin-right: 1rem;
        margin-bottom: 1rem;
        vertical-align: top;
    }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .retro-card {
        border: 2px solid #ffc107;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
    }

    .retro-card-title {
        font-size: 1.25rem;
        font-weight: bold;
    }

    .retro-btn {
        background-color: #343a40;
        border-color: #343a40;
    }

    .retro-btn:hover {
        background-color: #23272b;
        border-color: #23272b;
    }
</style>

<script src="https://www.emulatorjs.com/loader.js"></script>
<script>
    // Configuração inicial do Emulator JS
    var EJS_player = '#game';
    var EJS_core = 'nes';  // Core do emulador definido

    // Função para iniciar o jogo no Emulator JS
    function startGame() {
        // Verifica se EJS_gameUrl e EJS_core estão definidos antes de iniciar o jogo
        if (EJS_gameUrl && EJS_core) {
            EJS_loadROM(EJS_gameUrl, EJS_core);
        } else {
            console.error('EJS_gameUrl ou EJS_core não estão definidos. Não é possível iniciar o jogo.');
        }
    }

    // Função para configurar o URL do jogo dinamicamente
    function configureEmulator(gameId) {
        var emulatorBaseUrl = "https://www.emulatorjs.com";
        EJS_gameUrl = `${emulatorBaseUrl}/roms/${gameId}`;
        startGame(); // Inicia o jogo após configurar o URL dinamicamente
    }
</script>
