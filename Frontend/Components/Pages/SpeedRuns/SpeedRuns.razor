@page "/speedruns"

@using Frontend.Helpers
@using global::Helpers.Models
@using System.Text.Json
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
@inject HttpClient httpClient
@rendermode InteractiveServer

<PageTitle>Speed Runs</PageTitle>

<style>
    
    .custom-input {
        display: block;
        width: 100%;
        height: calc(1.5em + .75rem + 2px);
        padding: .375rem .75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
    
</style>


<div class="container">
    <!-- Barra Lateral à direita -->
    <div class="filter">
            <form method="get">
               
                  <h3>Game</h3>
                  <input type="text" class="custom-input" @oninput="@((ChangeEventArgs args) => SearchGame(args, "leaderboard"))" placeholder="Search for a game" />            
                  <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectGame(args, "leaderboard"))">
                      @if (_filteredGames == null)
                      {
                          <option>Loading games...</option>
                      }
                      else
                      {
                          <option value="">Select a game...</option>
                          @foreach (var game in _filteredGames)
                          {
                              <option value="@game.GameID">@game.GameName</option>
                          }
                      }
                  </select>
                
                  <br>
                
                  <h3>Category</h3>
                  <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "leaderboard"))" />
                  
                  <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "leaderboard"))">
                      @if (_filteredCategories == null)
                      {
                          <option>Loading categories...</option>
                      }
                      else
                      {
                          <option value="">Select a category...</option>
                          @foreach (var category in _filteredCategories)
                          {
                              <option value="@category.CategoryID">@category.CategoryName</option>
                          }
                      }
                  </select>
                
                
                
            </form>
        </div>
    
    <!-- Conteúdo Principal -->
    <div class="main-content">
        <div class="leaderboard">
            <h1>Speedrun Leaderboard</h1>
            <button class="btn btn-success mb-4" data-toggle="modal" data-target="#myModal">Add New Run</button>
            <button class="btn btn-primary mb-4" data-toggle="modal" data-target="#adminModal">Manage Runs</button>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Rank</th>
                    <th>Player</th>
                    <th>Game</th>
                    <th>Category</th>
                    <th>Time</th>
                    <th>Date Achieved</th>
                    <th>Video</th>
                </tr>
                </thead>
                <tbody>
                @if (_speedRuns != null)
                {
                    // Ordenar as runs por tempo e que sejam verificadas
                    
                    var orderedSpeedRuns = _speedRuns
                        .Where(run => run.Verified)
                        .OrderBy(run => run.RunTime)
                        .ToList();


                    for (int i = 0; i < orderedSpeedRuns.Count; i++)
                    {
                        var run = orderedSpeedRuns[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@run.PlayerName</td>
                            <td>@run.GameName</td>
                            <td>@run.CategoryName</td>
                            <td>@run.RunTime</td>
                            <td>@run.SubmissionDate.ToString("yyyy-MM-dd")</td>
                            <td><a href="@run.VideoLink">Link</a></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                       <td colspan="7" class="text-center">No runs found.</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Inserir Nova Run -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add New Run</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="post" @onsubmit="AddRun">
                <div class="modal-body">
                      <label>Game</label>
                      <input type="text" class="custom-input" @oninput="@((ChangeEventArgs args) => SearchGame(args, "addRun"))" placeholder="Search for a game" />            
                      <select class="form-control mt-3"  @onchange="@((ChangeEventArgs args) => SelectGame(args, "addRun"))" required >
                          @if (_filteredGamesAddRun == null)
                          {
                              <option>Loading games...</option>
                          }
                          else
                          {
                              <option value="">Select a game...</option>
                              @foreach (var game in _filteredGamesAddRun)
                              {
                                  <option value="@game.GameID">@game.GameName</option>
                              }
                          }
                      </select>
                    
                      <br>
                    
                      <label>Category</label>
                      <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "addRun"))" />
                      
                      <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "addRun"))" required>
                          @if (_filteredCategoriesAddRun == null)
                          {
                              <option>Loading categories...</option>
                          }
                          else
                          {
                              <option value="">Select a category...</option>
                              @foreach (var category in _filteredCategoriesAddRun)
                              {
                                  <option value="@category.CategoryID">@category.CategoryName</option>
                              }
                          }
                      </select>
                      
                      <br>
                      
                      <div class="form-group">
                          <label for="time">Time (hh:mm:ss)</label>
                          <input type="text" name="time" class="form-control" @bind="runTimeAddRun" required />
                      </div>
                      
                      <br>
                      
                      <div class="form-group">
                        <label for="videoLink">Video Link</label>
                        <input type="text" name="link" class="form-control" @bind="videoLinkAddRun" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success" >Add Run</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="adminModal" tabindex="-1" role="dialog" aria-labelledby="adminModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="adminModalLabel">Manage Runs</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Player</th>
                        <th>Game</th>
                        <th>Category</th>
                        <th>Time</th>
                        <th>Date Achieved</th>
                        <th>Verified</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                        @if (_speedRuns != null)
                        {
                            for (int i = 0; i < _speedRuns.Count; i++)
                            {
                                if (!_speedRuns[i].Verified)
                                {
                                    var run = _speedRuns[i];
                                    <tr>
                                        <td>@(i + 1)</td>
                                        <td>@run.PlayerID</td>
                                        <td>@run.</td>
                                        <td>@run.CategoryName</td>
                                        <td>@run.RunTime</td>
                                        <td>@run.SubmissionDate.ToString("yyyy-MM-dd")</td>
                                        <td>@(run.Verified ? "Yes" : "No")</td>
                                        <td><button class="btn btn-success">Verify</button></td>
                                    </tr> 
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js@9.0.1/public/assets/styles/choices.min.css">
    <script src="https://cdn.jsdelivr.net/npm/choices.js@9.0.1/public/assets/scripts/choices.min.js"></script>

    <script>
    window.onload = function() {
        var choicesSelects = Array.from(document.querySelectorAll('.choices-select'));
        choicesSelects.map(function(select) {
            new Choices(select, {
                itemSelectText: '',
            });
        });
    };
    
    
    </script>
    
@code {
    private List<GameViewModel>? _games;
    private List<GameViewModel>? _filteredGames;
    private List<GameViewModel>? _filteredGamesAddRun;
    
    private List<SpeedrunCategoryViewModel>? _categories;
    private List<SpeedrunCategoryViewModel>? _filteredCategories;
    private List<SpeedrunCategoryViewModel>? _filteredCategoriesAddRun;
    
    
    //Add Run
    private Guid selectedGameAddRun;
    private Guid selectedCategoryAddRun;
    private int runTimeAddRun;
    private string videoLinkAddRun;
  
    
    private List<SpeedrunRunViewModel>? _speedRuns;
    
    private string search = string.Empty;
    private Guid selectedGameId;
    private string userInput = string.Empty;
    
 
    private Guid userId = Guid.Parse("7e8056de-1f06-4c13-882f-7d7a0280e7cb");
    
    
    protected override async Task OnInitializedAsync()
    {
        _games = await ApiHelper.GetFromApiAsync<List<GameViewModel>>("api/SpeedRuns/games");
        
        _filteredGames = _games;
        _filteredGamesAddRun = _games;
        //_categories = await ApiHelper.GetFromApiAsync<List<SpeedrunCategoryViewModel>>("speedRuns/categories");
        //_speedRuns = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>("/speedRuns/runs/{8bb38d39-c58b-4eb4-a181-cbc3b918001e}");
        
    }
    
    private void SearchGame(ChangeEventArgs e, string localSearch)
    {
        
        search = e.Value.ToString();

        switch (localSearch)
        {
            case "leaderboard":
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredGames = _games;
                }
                else
                {
                    _filteredGames = _games?.Where(game => game.GameName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            
                    if (_filteredCategories != null)
                        _filteredCategories.Clear();
                }
                break;
            case "addRun":
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredGamesAddRun = _games;
                }
                else
                {
                    _filteredGamesAddRun = _games?.Where(game => game.GameName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            
                    if (_filteredCategoriesAddRun != null)
                        _filteredCategoriesAddRun.Clear();
                }
                break;
        }
        
        
    }
    
    private void SearchCategory(ChangeEventArgs e, string localSearch)
    {
        search = e.Value.ToString();

        switch (localSearch)
        {
            case "leaderboard":

                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredCategories = _categories;
                }
                else
                {
                    _filteredCategories = _categories?.Where(category => category.CategoryName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                }

                break;
             case "addRun":
                
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredCategoriesAddRun = _categories;
                }
                else
                {
                    _filteredCategoriesAddRun = _categories?.Where(category => category.CategoryName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                    
                }
                
                break;
        }
    }

    private async Task SelectCategory(ChangeEventArgs e, string localSearch)
    {
        switch (localSearch){
        
            case "leaderboard":
                if (e.Value.ToString() == "")
                {
                    if (_speedRuns != null)
                        _speedRuns.Clear();
                    return;
                }
                
                var selectedCategoryId = Guid.Parse(e.Value.ToString());
                _speedRuns = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>($"api/speedRuns/runs/{selectedCategoryId}");
                break;
            
            case "addRun":
                selectedCategoryAddRun = Guid.Parse(e.Value.ToString());
                break;
        }

        StateHasChanged();
    }
    

    private async Task SelectGame(ChangeEventArgs e, string localSearch)
    {
        if (e.Value.ToString() == "")
        {
            switch (localSearch)
            {
                case "leaderboard":
                    if (_categories != null)
                        _categories.Clear();
                    if (_speedRuns != null)     
                        _speedRuns.Clear();
                    break;
                case "addRun":
                    if (_filteredCategoriesAddRun != null)
                        _filteredCategoriesAddRun.Clear();
                    break;
            }
            
            return;
        }
        
        selectedGameId = Guid.Parse(e.Value.ToString());
        
        _categories = await ApiHelper.GetFromApiAsync<List<SpeedrunCategoryViewModel>>($"api/speedRuns/categories/{selectedGameId}");
        
        switch (localSearch)
        {
            case "leaderboard":
                _filteredCategories = _categories;
        
                if (_speedRuns != null)
                    _speedRuns.Clear();
                break;
            case "addRun":
                _filteredCategoriesAddRun = _categories;
                selectedGameAddRun = selectedGameId;
                break;
        }
        
        StateHasChanged();
    }
    
    public async Task AddRun()
    {
        try
        {
            await ApiHelper.PostToApiAsync<SpeedrunRunViewModel>($"api/speedRuns/runs/{userId}/{selectedCategoryAddRun}/{runTimeAddRun}/{videoLinkAddRun}");
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }

}
