@page "/speedruns"

@using Frontend.Helpers
@using global::Helpers.Models
@using System.Text.Json
@attribute [StreamRendering]
@inject ApiHelper ApiHelper
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Speed Runs</PageTitle>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<style>
    
    .custom-input {
        display: block;
        width: 100%;
        height: calc(1.5em + .75rem + 2px);
        padding: .375rem .75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
    
    .large-modal .modal-dialog {
        max-width: 1400px;
    }
    
</style>


<div class="container">
    <!-- Barra Lateral à direita -->
    <div class="filter">
        <form method="get">
               
            <h3>Game</h3>
            <input type="text" class="custom-input" @oninput="@((ChangeEventArgs args) => SearchGame(args, "leaderboard"))" placeholder="Search for a game" />            
            <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectGame(args, "leaderboard"))">
                @if (_filteredGames == null)
                {
                    <option>Loading games...</option>
                }
                else
                {
                    <option value="">Select a game...</option>
                    @foreach (var game in _filteredGames)
                    {
                        <option value="@game.GameID">@game.GameName</option>
                    }
                }
            </select>
                
            <br>
                
            <h3>Category</h3>
            <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "leaderboard"))" />
                  
            <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "leaderboard"))">
                @if (_filteredCategories == null)
                {
                    <option>Loading categories...</option>
                }
                else
                {
                    <option value="">Select a category...</option>
                    @foreach (var category in _filteredCategories)
                    {
                        <option value="@category.CategoryID">@category.CategoryName</option>
                    }
                }
            </select>
            
                
        </form>
        
        <br/>
        
        <div class="game-rules">
                <h4>Category Rules</h4>
                @if (_gameRulesLeaderboard == null)
                {
                    <p>Loading category rules...</p>
                }
                else
                {
                    <p>@_gameRulesLeaderboard</p>
                }
            </div>
    </div>
    
    <!-- Conteúdo Principal -->
    <div class="main-content">
        <div class="leaderboard">
            <h1>Speedrun Leaderboard</h1>
            <button class="btn btn-success mb-4" data-toggle="modal" data-target="#myModal">Add Run</button>
            <button class="btn btn-success mb-4" data-toggle="modal" data-target="#myRunsModal">My Runs</button>
            @if(_moderatorGames != null && _moderatorGames.Count > 0)  
            {
                <button class="btn btn-primary mb-4" style="margin-left: 4px;" data-toggle="modal" data-target="#verifyModal">Verify Runs</button>
            }
            @if(_moderatorGames != null && _moderatorGames.Count > 0)  
            {
                <button class="btn btn-primary mb-4" style="margin-left: 4px;" data-toggle="modal" data-target="#administrationModal">Administration</button>
            }
            
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Rank</th>
                    <th>Player</th>
                    <th>Game</th>
                    <th>Category</th>
                    <th>Time</th>
                    <th>Date Achieved</th>
                    <th>Video</th>
                </tr>
                </thead>
                <tbody>
                @if (_speedRunsLeaderboard != null)
                {
                    // Ordenar as runs por tempo e que sejam verificadas
                    
                    var orderedSpeedRuns = _speedRunsLeaderboard
                        .Where(run => run.Verified)
                        .OrderBy(run => run.RunTime)
                        .ToList();


                    for (int i = 0; i < orderedSpeedRuns.Count; i++)
                    {
                        var run = orderedSpeedRuns[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@run.PlayerName</td>
                            <td>@run.GameName</td>
                            <td>@run.CategoryName</td>
                            <td>@run.RunTime</td>
                            <td>@run.SubmissionDate.ToString("yyyy-MM-dd")</td>
                            <td><a href="@run.VideoLink">Link</a></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                       <td colspan="7" class="text-center">No runs found.</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Inserir Nova Run -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add New Run</h5>
            </div>
            <form method="post" @onsubmit="AddRun">
                <div class="modal-body">
                      <label>Game</label>
                      <input type="text" class="custom-input" @oninput="@((ChangeEventArgs args) => SearchGame(args, "addRun"))" placeholder="Search for a game" />            
                      <select class="form-control mt-3"  @onchange="@((ChangeEventArgs args) => SelectGame(args, "addRun"))" required >
                          @if (_filteredGamesAddRun == null)
                          {
                              <option>Loading games...</option>
                          }
                          else
                          {
                              <option value="">Select a game...</option>
                              @foreach (var game in _filteredGamesAddRun)
                              {
                                  <option value="@game.GameID">@game.GameName</option>
                              }
                          }
                      </select>
                    
                      <br>
                    
                      <label>Category</label>
                      <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "addRun"))" />
                      
                      <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "addRun"))" required>
                          @if (_filteredCategoriesAddRun == null)
                          {
                              <option>Loading categories...</option>
                          }
                          else
                          {
                              <option value="">Select a category...</option>
                              @foreach (var category in _filteredCategoriesAddRun)
                              {
                                  <option value="@category.CategoryID">@category.CategoryName</option>
                              }
                          }
                      </select>
                      
                      <br>
                      
                      <div class="form-group">
                          <label for="time">Time (seconds)</label>
                          <input type="text" name="time" class="form-control" @bind="runTimeAddRun" required />
                      </div>
                      
                      <br>
                      
                      <div class="form-group">
                        <label for="videoLink">Video Link</label>
                        <input type="text" name="link" class="form-control" @bind="videoLinkAddRun" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success" >Add Run</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade large-modal" id="verifyModal" tabindex="-1" role="dialog" aria-labelledby="verifyModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="verifyModalLabel">Manage Runs</h5>
                <div>
                    <select class="form-control mt-3" style="margin-top: 100px" @bind="_gameSelectedVerifyRuns" >
                        @if (_moderatorGames == null)
                        {
                            <option>Loading games...</option>
                        }
                        else
                        {
                            <option value="">Select a game...</option>
                            @foreach (var game in _moderatorGames)
                            {
                                <option value="@game.GameID">@game.GameName</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Player</th>
                        <th>Game</th>
                        <th>Category</th>
                        <th>Time</th>
                        <th>Date Achieved</th>
                        <th>Video</th>
                        <th>Action</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_runsToVerify != null)
                    {
                        for (int i = 0; i < _runsToVerify.Count; i++)
                        {
                            if (_runsToVerify[i].GameID.Equals(_gameSelectedVerifyRuns))
                            {
                                var run = _runsToVerify[i];
                                <tr>
                                    <td>@run.PlayerName</td>
                                    <td>@run.GameName</td>
                                    <td>@run.CategoryName</td>
                                    <td>@run.RunTime</td>
                                    <td>@run.SubmissionDate.ToString("yyyy-MM-dd")</td>
                                    <td>@(run.VideoLink)</td>
                                    <td><button class="btn btn-success" @onclick="@((MouseEventArgs args) => verifyRun(args, run.RunID, true))" >True</button></td>
                                    <td><button class="btn btn-danger" @onclick="@((MouseEventArgs args) => verifyRun(args, run.RunID, false))" >False</button></td>
                                </tr> 
                            }
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade large-modal" id="myRunsModal" tabindex="-1" role="dialog" aria-labelledby="myRunsModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myRunsModalLabel">My Runs</h5>
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Player</th>
                        <th>Game</th>
                        <th>Category</th>
                        <th>Time</th>
                        <th>Date Achieved</th>
                        <th>Verified</th>
                        <th>Video</th>

                    </tr>
                    </thead>
                    <tbody>
                    @if (_playerRuns != null)
                    {
                        for (int i = 0; i < _playerRuns.Count; i++)
                        {
                            var run = _playerRuns[i];
                            <tr>
                                <td>@run.Rank</td>
                                <td>@run.PlayerName</td>
                                <td>@run.GameName</td>
                                <td>@run.CategoryName</td>
                                <td>@run.RunTime</td>
                                <td>@run.SubmissionDate.ToString("yyyy-MM-dd")</td>
                                <td>@run.Verified</td>
                                <td>@(run.VideoLink)</td>

                            </tr> 
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="administrationModal" tabindex="-1" role="dialog" aria-labelledby="administrationModalLabel" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="administrationModalLabel">Administration</h5>
                </div>
                
                <label>Game</label>
                  <input type="text" class="custom-input" @oninput="@((ChangeEventArgs args) => SearchGame(args, "administration"))" placeholder="Search for a game" />            
                  <select class="form-control mt-3"  @onchange="@((ChangeEventArgs args) => SelectGame(args, "administration"))" required >
                      @if (_filteredGamesAdministration == null)
                      {
                          <option>Loading games...</option>
                      }
                      else
                      {
                          <option value="">Select a game...</option>
                          @foreach (var game in _filteredGamesAdministration)
                          {
                              <option value="@game.GameID">@game.GameName</option>
                          }
                      }
                  </select>
                  
                  <br>
                
                <div class="accordion" id="addCategoryAccordion">
                    <div class="card">
                        <div class="card-header" id="addCategoryHeading">
                            <h2 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#addCategory" aria-expanded="true" aria-controls="addCategory">
                                    Add Category
                                </button>
                            </h2>
                        </div>

                        <div id="addCategory" class="collapse" aria-labelledby="addCategoryHeading" data-parent="#addCategoryAccordion">
                            <div class="card-body">
                                <form method="post" @onsubmit="AddCategory">
                                    <div class="form-group">
                                        <label for="categoryName">Category Name</label>
                                        <input type="text" id="categoryName" class="form-control" @bind="categoryAddName" required />
                                    </div>
                                    <div class="form-group">
                                        <label for="categoryDescription">Category Description</label>
                                        <textarea id="categoryDescription" class="form-control" @bind="categoryAddDescription" required></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label for="categoryRules">Category Rules</label>
                                        <textarea id="categoryRules" class="form-control" @bind="categoryAddRules" required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-success">Adicionar Categoria</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="accordion" id="updateCategoryAccordion">
                    <div class="card">
                        <div class="card-header" id="updateCategoryHeading">
                            <h2 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#updateCategory" aria-expanded="true" aria-controls="updateCategory">
                                    Update Category
                                </button>
                            </h2>
                        </div>
                        
                        <div id="updateCategory" class="collapse" aria-labelledby="updateCategoryHeading" data-parent="#updateCategoryAccordion">
                            <div class="card-body">
                                <form method="post" @onsubmit="UpdateCategory">
                                    
                                    <label>Category</label>
                                    <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "administration"))" />
                                          
                                    <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "administration"))" required>
                                        @if (_filteredCategoriesAdministration == null)
                                        {
                                            <option>Loading categories...</option>
                                        }
                                        else
                                        {
                                            <option value="">Select a category...</option>
                                            @foreach (var category in _filteredCategoriesAdministration)
                                            {
                                                <option value="@category.CategoryID">@category.CategoryName</option>
                                            }
                                        }
                                    </select>
                                    
                                    <br/>
                                    
                                    <div class="form-group">
                                        <label for="categoryName">Category Name</label>
                                        <input type="text" id="categoryName" class="form-control" @bind="categoryUpdateName" required/>
                                    </div>
                                    <div class="form-group">
                                        <label for="categoryDescription">Category Description</label>
                                        <textarea id="categoryDescription" class="form-control" @bind="categoryUpdateAddDescription" required></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label for="categoryRules">Category Rules</label>
                                        <textarea id="categoryRules" class="form-control" @bind="categoryUpdateAddRules" required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-success">Adicionar Categoria</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="accordion" id="removecategoryAccordion">
                    <div class="card">
                        <div class="card-header" id="removeCategoryHeading">
                            <h2 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#removeCategory" aria-expanded="true" aria-controls="removeCategory">
                                    Remove Category
                                </button>
                            </h2>
                        </div>
                
                        <div id="removeCategory" class="collapse" aria-labelledby="removeCategoryHeading" data-parent="#removecategoryAccordion">
                            <div class="card-body">
                                <form method="post" @onsubmit="DeleteCategory">
                                    <label>Category</label>
                                    <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="@((ChangeEventArgs args) => SearchCategory(args, "administration"))" />
                                          
                                    <select class="form-control mt-3" @onchange="@((ChangeEventArgs args) => SelectCategory(args, "administration"))" required>
                                        @if (_filteredCategoriesAdministration == null)
                                        {
                                            <option>Loading categories...</option>
                                        }
                                        else
                                        {
                                            <option value="">Select a category...</option>
                                            @foreach (var category in _filteredCategoriesAdministration)
                                            {
                                                <option value="@category.CategoryID">@category.CategoryName</option>
                                            }
                                        }
                                    </select>
                                    
                                    <br/>
                                    <button type="submit" class="btn btn-success">Eliminar Categoria</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <br/>
                
                <div class="accordion" id="addModeratorAccordion">
                    <div class="card">
                        <div class="card-header" id="addModeratorHeading">
                            <h2 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#addModerator" aria-expanded="true" aria-controls="addModerator">
                                    Add Moderator
                                </button>
                            </h2>
                        </div>
                
                        <div id="addModerator" class="collapse" aria-labelledby="addModeratorHeading" data-parent="#addModeratorAccordion">
                            <div class="card-body">
                                <form method="post" @onsubmit="AddModerator">
                                    
                                    <label>User</label>
                                    <input type="text" class="custom-input" placeholder="Search for a category..." @oninput="SearchUser" />
                                          
                                    <select class="form-control mt-3" @onchange="SelectUser" required>
                                        @if (_filteredUsersAdministration == null)
                                        {
                                            <option>Loading users...</option>
                                        }
                                        else
                                        {
                                            <option value="">Select a user...</option>
                                            @foreach (var user in _filteredUsersAdministration)
                                            {
                                                <option value="@user.UserID">@user.UserName</option>
                                            }
                                        }
                                    </select>
                                    <br/>
                                    
                                    <button type="submit" class="btn btn-success">Add Moderator</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="accordion" id="deleteModeratorAccordion">
                    <div class="card">
                        <div class="card-header" id="deleteModeratorHeading">
                            <h2 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#deleteModerator" aria-expanded="true" aria-controls="deleteModerator">
                                    Delete Moderator
                                </button>
                            </h2>
                        </div>
                
                        <div id="deleteModerator" class="collapse" aria-labelledby="deleteModeratorHeading" data-parent="#deleteModeratorAccordion">
                            <div class="card-body">
                                <form method="post" @onsubmit="DeleteModerator">
                                    
                                    <label>Moderator</label>
                                    <input type="text" class="custom-input" placeholder="Search for a moderator..." @oninput="SearchModerator" />
                                          
                                    <select class="form-control mt-3" @onchange="SelectModerator" required>
                                        @if (_filteredModerators == null)
                                        {
                                            <option>Loading moderators...</option>
                                        }
                                        else
                                        {
                                            <option value="">Select a moderator...</option>
                                            @foreach (var moderator in _filteredModerators)
                                            {
                                                <option value="@moderator.ModeratorID">@moderator.ModeratorName </option>
                                            }
                                        }
                                    </select>
                                    
                                    <br/>
                                    <button type="submit" class="btn btn-success">Delete Moderator</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    function closeModal(modalId) {
        $('#' + modalId).modal('hide');
    }
    
    function closeAccordion(accordionId) {
        $('#' + accordionId).collapse('hide');
    }
</script>


    
@code {
    private List<GameViewModel>? _games;
    private List<GameViewModel>? _filteredGames;
    private List<GameViewModel>? _filteredGamesAddRun;
    
    private List<SpeedrunCategoryViewModel>? _categories;
    private List<SpeedrunCategoryViewModel>? _filteredCategories;
    private List<SpeedrunCategoryViewModel>? _filteredCategoriesAddRun;
    
    private List<GameViewModel>? _filteredGamesAdministration;
    private List<SpeedrunCategoryViewModel>? _filteredCategoriesAdministration;
    private Guid? selectedCategoryAdministration;
    
    
    //Add Run
    private Guid selectedGameAddRun;
    private Guid selectedCategoryAddRun;
    private int runTimeAddRun;
    private string videoLinkAddRun;
    
    //Add Category
    private string categoryAddName;
    private string categoryAddDescription;
    private string categoryAddRules;
    
    //Update Category
    private string categoryUpdateName;
    private string categoryUpdateAddDescription;
    private string categoryUpdateAddRules;
    
    //Moderators
    private List<SpeedrunModeratorViewModel> _moderators;
    private List<SpeedrunModeratorViewModel> _filteredModerators;
    private Guid? _selectedModerator;
    
    //User
    private List<UserSpeedRunsViewModel> _users;
    private List<UserSpeedRunsViewModel> _filteredUsersAdministration;
    private Guid _selectedUser;
    
    private List<SpeedrunRunViewModel>? _speedRunsLeaderboard;
    private string _gameRulesLeaderboard;
    
    
    private string search = string.Empty;
    private Guid selectedGameId;
    private string userInput = string.Empty;
    
 
    private Guid userId = Guid.Parse("8d59f878-81fe-4186-a106-cf32ee5ecf9a");
    private List<GameViewModel> _moderatorGames;
    private List<SpeedrunRunViewModel> _runsToVerify;
    private Guid _gameSelectedVerifyRuns;
    
    private List<SpeedrunRunViewModel> _playerRuns;
    
    
    protected override async Task OnInitializedAsync()
    {
       
        await LoadData();

        //_categories = await ApiHelper.GetFromApiAsync<List<SpeedrunCategoryViewModel>>("speedRuns/categories");
        //_speedRunsLeaderboard = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>("/speedRuns/runs/{8bb38d39-c58b-4eb4-a181-cbc3b918001e}");

    }
    
    private async Task LoadData()
    {
        _games = await ApiHelper.GetFromApiAsync<List<GameViewModel>>("api/SpeedRuns/games");
        
        _filteredGames = _games;
        _filteredGamesAddRun = _games;
        
        _playerRuns = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>($"api/SpeedRuns/runs/player/{userId}");
    
        _moderatorGames = await ApiHelper.GetFromApiAsync<List<GameViewModel>>($"api/SpeedRuns/moderators/games/{userId}");
        if (_moderatorGames != null)
            _runsToVerify = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>("api/SpeedRuns/runs/verify");    
            _filteredGamesAdministration = _games;
    }
    
    private void SearchGame(ChangeEventArgs e, string localSearch)
    {
        
        search = e.Value.ToString();

        switch (localSearch)
        {
            case "leaderboard":
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredGames = _games;
                }
                else
                {
                    _filteredGames = _games?.Where(game => game.GameName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            
                    if (_filteredCategories != null)
                        _filteredCategories.Clear();
                }
                break;
            case "addRun":
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredGamesAddRun = _games;
                }
                else
                {
                    _filteredGamesAddRun = _games?.Where(game => game.GameName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            
                    if (_filteredCategoriesAddRun != null)
                        _filteredCategoriesAddRun.Clear();
                }
                break;
            case "administration":
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredGamesAdministration = _games;
                }
                else
                {
                    _filteredGamesAdministration = _games?.Where(game => game.GameName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            
                    if (_filteredCategoriesAdministration != null)
                        _filteredCategoriesAdministration.Clear();
                } 
                break;
                
        }
        
        
    }
    
    private void SearchCategory(ChangeEventArgs e, string localSearch)
    {
        search = e.Value.ToString();

        switch (localSearch)
        {
            case "leaderboard":

                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredCategories = _categories;
                }
                else
                {
                    _filteredCategories = _categories?.Where(category => category.CategoryName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                }

                break;
             case "addRun":
                
                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredCategoriesAddRun = _categories;
                }
                else
                {
                    _filteredCategoriesAddRun = _categories?.Where(category => category.CategoryName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                    
                }
                
                break;
            case "administration":

                if (string.IsNullOrWhiteSpace(search))
                {
                    _filteredCategoriesAdministration = _categories;
                }
                else
                {
                    _filteredCategoriesAdministration = _categories?.Where(category => category.CategoryName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                }
                break;
        }
    }

    private async Task SelectCategory(ChangeEventArgs e, string localSearch)
    {
        switch (localSearch){
        
            case "leaderboard":
                if (e.Value.ToString() == "")
                {
                    if (_speedRunsLeaderboard != null)
                        _speedRunsLeaderboard.Clear();
                    return;
                }
                
                var selectedCategoryId = Guid.Parse(e.Value.ToString());
                _speedRunsLeaderboard = await ApiHelper.GetFromApiAsync<List<SpeedrunRunViewModel>>($"api/speedRuns/runs/{selectedCategoryId}");
                
                SpeedrunCategoryViewModel category = await ApiHelper.GetFromApiAsync<SpeedrunCategoryViewModel>($"api/speedRuns/categorie/{selectedCategoryId}");
                if (category != null)
                    _gameRulesLeaderboard = category.CategoryRules;
                
                break;
            
            case "addRun":
                selectedCategoryAddRun = Guid.Parse(e.Value.ToString());
                break;
            case "administration":
                selectedCategoryAdministration = Guid.Parse(e.Value.ToString());
                
                var selectedCategoryId2 = Guid.Parse(e.Value.ToString());
                SpeedrunCategoryViewModel category2 = await ApiHelper.GetFromApiAsync<SpeedrunCategoryViewModel>($"api/speedRuns/categorie/{selectedCategoryId2}");
                
                categoryUpdateName = category2.CategoryName;
                categoryUpdateAddDescription = category2.CategoryDescription;
                categoryUpdateAddRules = category2.CategoryRules;
                break;
        }

        StateHasChanged();
    }
    

    private async Task SelectGame(ChangeEventArgs e, string localSearch)
    {
        if (e.Value.ToString() == "")
        {
            switch (localSearch)
            {
                case "leaderboard":
                    if (_categories != null)
                        _categories.Clear();
                    if (_speedRunsLeaderboard != null)     
                        _speedRunsLeaderboard.Clear();
                    break;
                case "addRun":
                    if (_filteredCategoriesAddRun != null)
                        _filteredCategoriesAddRun.Clear();
                    break;
                case "administration":
                    if (_filteredCategoriesAdministration != null) 
                        _filteredCategoriesAdministration.Clear();
                break;
            }
            
            return;
        }
        
        selectedGameId = Guid.Parse(e.Value.ToString());
        
        _categories = await ApiHelper.GetFromApiAsync<List<SpeedrunCategoryViewModel>>($"api/speedRuns/categories/{selectedGameId}");
        
        switch (localSearch)
        {
            case "leaderboard":
                _filteredCategories = _categories;
        
                if (_speedRunsLeaderboard != null)
                    _speedRunsLeaderboard.Clear();
                break;
            case "addRun":
                _filteredCategoriesAddRun = _categories;
                selectedGameAddRun = selectedGameId;
                break;
            case "administration":
                _filteredCategoriesAdministration = _categories;
                
                _moderators = await ApiHelper.GetFromApiAsync<List<SpeedrunModeratorViewModel>>($"api/speedRuns/moderators/byGame/{selectedGameId}");
                _filteredModerators = _moderators;
                
                _users = await ApiHelper.GetFromApiAsync<List<UserSpeedRunsViewModel>>($"api/speedRuns/users");
                _filteredUsersAdministration = _users;
                break;
        }
        
        StateHasChanged();
    }
    
    public async Task AddRun()
    {
        try
        {
            await ApiHelper.PostToApiAsync<SpeedrunRunViewModel>($"api/speedRuns/runs/{userId}/{selectedCategoryAddRun}/{runTimeAddRun}/{videoLinkAddRun}");
            await JSRuntime.InvokeVoidAsync("closeModal", "myModal");
            await LoadData();
       
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }

    private async Task verifyRun(MouseEventArgs e, Guid runId, bool verify)
    {
        try
        {
            await ApiHelper.PutToApiAsync($"api/speedRuns/runs/verify/{runId}/{userId}/{verify}");
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to verify! {ex.Message}");
        }
        
        StateHasChanged();
    }
    
    private async Task AddCategory()
    {
        try
        {
            await ApiHelper.PostToApiAsync<SpeedrunCategoryViewModel>($"api/speedRuns/categories/add/{selectedGameId}/{categoryAddName}/{categoryAddDescription}/{categoryAddRules}");
            
            //close accordion
            await JSRuntime.InvokeVoidAsync("closeAccordion", "addCategory");
            
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }
    
    private async Task UpdateCategory()
    {
        try
        {
            await ApiHelper.PutToApiAsync($"api/speedRuns/categories/update/{selectedCategoryAdministration}/{categoryUpdateName}/{categoryUpdateAddDescription}/{categoryUpdateAddRules}");
            
            await JSRuntime.InvokeVoidAsync("closeAccordion", "updateCategory");
            
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }
    
    private async Task DeleteCategory()
    {
        try
        {
            await ApiHelper.DeleteFromApiAsync<SpeedrunCategoryViewModel>($"api/speedRuns/categories/delete/{selectedCategoryAdministration}");
            
            //close accordion
            await JSRuntime.InvokeVoidAsync("closeAccordion", "removeCategory");
            
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }
    
    // search moderator
    private async void SearchModerator(ChangeEventArgs e)
    {
        userInput = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(userInput))
        {
            _filteredModerators = _moderators;
        }
        else
        {
            _filteredModerators = _moderators?.Where(moderator => moderator.ModeratorName.Contains(userInput, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
    
    // select moderator
    private async void SelectModerator(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            _selectedModerator = null;
            return;
        }
        
        _selectedModerator = Guid.Parse(e.Value.ToString());
    }
    
    // delete moderator
    private async void DeleteModerator()
    {
        if (_selectedModerator == null)
        {
            return;
        }
        
        try
        {
            await ApiHelper.DeleteFromApiAsync<SpeedrunModeratorViewModel>($"api/speedRuns/moderators/delete/{_selectedModerator}");
            await LoadData();
            
            await JSRuntime.InvokeVoidAsync("closeAccordion", "deleteModerator");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to delete! {ex.Message}");
        }
    }
    
    // search user
    private async void SearchUser(ChangeEventArgs e)
    {
        userInput = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(userInput))
        {
            _filteredUsersAdministration = _users;
        }
        else
        {
            _filteredUsersAdministration = _users?.Where(user => user.UserName.Contains(userInput, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
    
    // select user
    private async void SelectUser(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            _selectedUser = Guid.Empty;
            return;
        }
        
        _selectedUser = Guid.Parse(e.Value.ToString());
    }
    
    // add moderator
    private async void AddModerator()
    {
        if (_selectedUser == Guid.Empty)
        {
            return;
        }
        
        try
        {
            await ApiHelper.PostToApiAsync<SpeedrunModeratorViewModel>($"api/speedRuns/moderators/add/{_selectedUser}/{selectedGameId}");
            await LoadData();
            await JSRuntime.InvokeVoidAsync("closeAccordion", "addModerator");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error to add! {ex.Message}");
        }
    }
    
}
