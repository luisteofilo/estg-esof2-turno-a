@page "/register"
@layout RegisterLayout

@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using ESOF.WebApp.DBLayer.Entities
@rendermode InteractiveServer

<div>
    <body>
        <div class="register-container">
            <h1>RETROGAMING</h1>
            <img src="Imgs/retro-gaming-logo.png" alt="Game Icon">
            <h2>REGISTER</h2>
                
            <div class="div-container">
                <text>Email</text>
                <input type="email" id="email" @bind="_userDto.Email" required/>
                <span class="text-danger">@_emailError</span>
                    
                <text>Password</text>
                <input id="password" type="password" class="password-field" @bind="_userDto.Password" required/>
                <span class="text-danger">@_passwordError</span>
                
                <button type="button" @onclick="HandleSubmit">REGISTER</button>
                <div class="mt-3">
                    <span>@registrationMessage</span>
                </div>
            </div>
            <div class="login-link">
                <text>Do have an account? <a href="/">Login</a></text>
            </div>
        </div>
    </body>
</div>

@code
{
    private UserDTO _userDto = new UserDTO();
    private string _emailError;
    private string _passwordError;
    private string registrationMessage;

    private async Task HandleSubmit()
    {
        try
        {
            Console.WriteLine("HandleSubmit called.");
            _emailError = null;
            _passwordError = null;
            var context = new ValidationContext(_userDto);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(_userDto, context, validationResults, true);

            Console.WriteLine($"Validation Results: {isValid}");
            foreach (var validationResult in validationResults)
            {
                Console.WriteLine($"Validation Error: {validationResult.ErrorMessage}");
            }

            if (!isValid)
            {
                foreach (var validationResult in validationResults)
                {
                    if (validationResult.MemberNames.Contains(nameof(UserDTO.Email)))
                    {
                        _emailError = validationResult.ErrorMessage;
                    }

                    if (validationResult.MemberNames.Contains(nameof(UserDTO.Password)))
                    {
                        _passwordError = validationResult.ErrorMessage;
                    }
                }
                return;
            }

            Console.WriteLine($"Email: {_userDto.Email}");
            Console.WriteLine($"Password: {_userDto.Password}");
            
            Console.WriteLine("Sending data to the API...");
            var response = await Http.PostAsJsonAsync("http://localhost:5295/register", _userDto);
            Console.WriteLine("API request sent.");

            if (response.IsSuccessStatusCode)
            {
                registrationMessage = "Registration successful!";
            }
            else
            {
                registrationMessage = "Registration failed.";
            }

            Console.WriteLine($"API Response: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            registrationMessage = "An error occurred while processing your request.";
        }
    }
}
