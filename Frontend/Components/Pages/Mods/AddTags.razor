@page "/add-tags/{modId:guid?}"
@using Frontend.Helpers
@using ESOF.WebApp.DBLayer.Entities
@using System.Collections.Generic
@inject ApiHelper ApiHelper

<h3>Mod Details</h3>

@if (mod == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h4>@mod.Name</h4>
        <p><strong>Game:</strong> @mod.Game</p>
        <p><strong>Description:</strong> @mod.Description</p>
        <p><strong>Release Date:</strong> @mod.ReleaseDate.ToString("yyyy-MM-dd")</p>
        <p><strong>Author:</strong> @mod.Author</p>
        <p><strong>Version:</strong> @mod.Version</p>
        <p><strong>Download Link:</strong> <a href="@mod.DownloadLink">@mod.DownloadLink</a></p>

        <h5>Tags</h5>
        <EditForm Model=@tags OnValidSubmit=@HandleValidSubmit FormName="AddTags">
            <table class="table">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Name</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tag in tags)
                    {
                        <tr>
                            <td>
                                <button type="button" class="btn btn-secondary" @onclick="() => ToggleSelection(tag)">
                                    @(tag.IsSelected ? "Uncheck" : "Check")
                                </button>
                            </td>
                            <td>@tag.Name</td>
                            <td>@tag.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public Guid? modId { get; set; }

    private ModDto mod;
    private List<TagDto> tags = new List<TagDto>();

    protected override async Task OnInitializedAsync()
    {
        if (modId.HasValue)
        {
            mod = await ApiHelper.GetFromApiAsync<ModDto>($"mod/{modId.Value}");
            tags = await ApiHelper.GetFromApiAsync<List<TagDto>>($"tags");

            // Mark the tags that are already associated with the mod as selected
            foreach (var modTag in mod.Tags)
            {
                var tag = tags.FirstOrDefault(t => t.TagId == modTag.TagId);
                if (tag != null)
                {
                    tag.IsSelected = true;
                }
            }
        }
    }

    private void ToggleSelection(TagDto tag)
    {
        tag.IsSelected = !tag.IsSelected;
        Console.WriteLine("Tag selection toggled:");
        Console.WriteLine($"Tag ID: {tag.TagId}, IsSelected: {tag.IsSelected}");
    }

    private async Task HandleValidSubmit()
    {
        var tag2 = tags.FirstOrDefault(t => t.TagId == new Guid("05e4447e-a308-4f18-b261-0b4954c7fade"));
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(tag2));

        if (tag2 != null)
        {
            tag2.IsSelected = true;
        }
        else
        {
            Console.WriteLine("Tag not found.");
        }

        var selectedTags2 = tags.Where(t => t.IsSelected).ToList();
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(selectedTags2));
        await ApiHelper.PostToApiAsync($"/tag/{modId}", selectedTags2);
        Console.WriteLine("Submit button clicked.");
        var selectedTags = tags.Where(t => t.IsSelected).ToList();
        Console.WriteLine("Selected tags:");
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(selectedTags));
        
        // Await an async API call
        await ApiHelper.PostToApiAsync($"/tag/{modId}", selectedTags);
    }

    public class ModDto
    {
        public Guid ModId { get; set; }
        public string Name { get; set; }
        public string Game { get; set; }
        public string Description { get; set; }
        public DateTime ReleaseDate { get; set; }
        public string Author { get; set; }
        public string Version { get; set; }
        public string DownloadLink { get; set; }
        public int DownloadCount { get; set; }
        public double Rating { get; set; }
        public List<TagDto> Tags { get; set; }
    }

    public class TagDto
    {
        public Guid TagId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public bool IsSelected { get; set; }
    }
}
