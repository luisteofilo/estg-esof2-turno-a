@page "/add-tags/{modId:guid?}"
@using Frontend.Helpers
@using ESOF.WebApp.DBLayer.Entities
@using System.Collections.Generic
@inject ApiHelper ApiHelper

@if (mod == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h4>Add Tags to Mod: @mod.Name</h4>
        <EditForm Model=@tags OnValidSubmit=@HandleValidSubmit FormName="AddTags">
            <table class="table">
                <thead>
                <tr>
                    <th>Select</th>
                    <th>Name</th>
                    <th>Description</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var tag in tags)
                {
                    <tr>
                        <td>
                            <InputCheckbox @bind-Value="@tag.IsSelected" />
                        </td>
                        <td>@tag.Name</td>
                        <td>@tag.Description</td>
                    </tr>
                }
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
        @if (shouldRedirect)
            {
                <NavLink class="nav-link" href="@($"/mod/{mod.ModId}")">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> See Mod Details
                </NavLink>
            }
    </div>
}

@code {
    [Parameter]
    public Guid? modId { get; set; }

    private ModDto mod;
    private List<TagDto> tags = new List<TagDto>();
    private bool shouldRedirect = false;

    protected override async Task OnInitializedAsync()
    {
        if (modId.HasValue)
        {
            mod = await ApiHelper.GetFromApiAsync<ModDto>($"mod/{modId.Value}");
            tags = await ApiHelper.GetFromApiAsync<List<TagDto>>($"tags");

            // Mark the tags that are already associated with the mod as selected
            foreach (var modTag in mod.Tags)
            {
                var tag = tags.FirstOrDefault(t => t.TagId == modTag.TagId);
                if (tag != null)
                {
                    tag.IsSelected = true;
                }
            }
        }
    }
    
    private async Task HandleValidSubmit()
    {
        //var tag = tags.FirstOrDefault(t => t.TagId == new Guid("922c3cf9-92d2-4c27-b30e-6e50a9e6e4af"));
        //var tag2 = tags.FirstOrDefault(t => t.TagId == new Guid("05e4447e-a308-4f18-b261-0b4954c7fade"));
        var tag = tags.FirstOrDefault(t => t.TagId == new Guid("292bd67c-0b4e-45e8-8200-b52e24044c0a"));
        var tag2 = tags.FirstOrDefault(t => t.TagId == new Guid("e571ab56-7ab9-4277-be93-79ccedf2b821"));
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(tag2));

        if (tag != null && tag2 != null)
        {
            tag.IsSelected = true;
            tag2.IsSelected = true;
        }
        else
        {
            Console.WriteLine("Tag not found.");
        }
        Console.WriteLine("Submit button clicked.");
        var selectedTags = tags.Where(t => t.IsSelected).ToList();
        Console.WriteLine("Selected tags:");
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(selectedTags));
        
        // Await an async API call
        await ApiHelper.PostToApiAsync($"/tag/{modId}", selectedTags);
        shouldRedirect = true;
    }

    public class ModDto
    {
        public Guid ModId { get; set; }
        public string Name { get; set; }
        public string Game { get; set; }
        public string Description { get; set; }
        public DateTime ReleaseDate { get; set; }
        public string Author { get; set; }
        public string Version { get; set; }
        public string DownloadLink { get; set; }
        public int DownloadCount { get; set; }
        public double Rating { get; set; }
        public List<TagDto> Tags { get; set; }
    }

    public class TagDto
    {
        public Guid TagId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public bool IsSelected { get; set; }
    }
}
