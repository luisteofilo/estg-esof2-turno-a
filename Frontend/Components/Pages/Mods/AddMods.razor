@page "/add-mod"
@inject NavigationManager NavigationManager

<h1>Add New Mod</h1>

<EditForm EditContext=this.editContext OnValidSubmit=this.SubmitForm>
    <DataAnnotationsValidator />

    <div class="col">
        <InputText class="form-control" @bind-Value=this.newMod.Name placeholder="Mod Name" />
    </div>

    <div class="col">
        <InputText class="form-control" @bind-Value=this.newMod.Game placeholder="Game Name" />
    </div>

    <div class="col">
        <InputTextArea class="form-control" @bind-Value=this.newMod.Description placeholder="Description" />
    </div>
    
    <div class="col">
        <InputDate class="form-control" @bind-Value=this.newMod.ReleaseDate placeholder="Release Date" />
    </div>

    <div class="col">
        <InputText class="form-control" @bind-Value=this.newMod.Author placeholder="Author Name" />
    </div>

    <div class="col">
        <InputText class="form-control" @bind-Value=this.newMod.Version placeholder="Version" />
    </div>

    <div class="col">
        <InputText class="form-control" @bind-Value=this.newMod.DownloadLink placeholder="Download Link" />
    </div>

    <div class="col m-2 p-2 text-end">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

@if (this.isMessage)
{
    <div class="m-2">
        <div class="alert @this.alertCss">@this.message</div>
    </div>
}

@code {
    private Mod newMod = new Mod();
    private EditContext? editContext;
    private string message = string.Empty;
    private bool isMessage => !string.IsNullOrWhiteSpace(message);
    private string alertCss => success ? "alert-success" : "alert-danger";
    private bool success = true;

    protected override void OnInitialized()
        => this.editContext = new EditContext(newMod);

    private async Task SubmitForm()
    {
        LogFormValues();
        
        try
        {
            // Simulate a delay as a placeholder for actual Web API call
            await Task.Delay(200);
            
            // Replace the following line with actual Web API call to save the mod data
            var result = await SaveModAsync(newMod);

            this.success = result;
            this.message = this.success
                ? "Mod created successfully."
                : "Error creating mod.";
        }
        catch (Exception ex)
        {
            this.success = false;
            this.message = $"Error creating mod: {ex.Message}";
        }
    }

    private void LogFormValues()
    {
        Console.WriteLine($"Name: {newMod.Name}");
        Console.WriteLine($"Game: {newMod.Game}");
        Console.WriteLine($"Description: {newMod.Description}");
        Console.WriteLine($"ReleaseDate: {newMod.ReleaseDate}");
        Console.WriteLine($"Author: {newMod.Author}");
        Console.WriteLine($"Version: {newMod.Version}");
        Console.WriteLine($"DownloadLink: {newMod.DownloadLink}");
    }

    private async Task<bool> SaveModAsync(Mod mod)
    {
        try
        {
            using var client = new HttpClient();
            var response = await client.PostAsJsonAsync("mods", mod);
            response.EnsureSuccessStatusCode();

            return true;
        }
        catch
        {
            return false;
        }
    }

    public class Mod
    {
        public string Name { get; set; } = string.Empty;
        public string Game { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime ReleaseDate { get; set; } = DateTime.Now;
        public string Author { get; set; } = string.Empty;
        public string Version { get; set; } = string.Empty;
        public string DownloadLink { get; set; } = string.Empty;
    }
}
