@page "/Games"
@using ESOF.WebApp.DBLayer.Entities
@using ESOF.WebApp.DBLayer.Dto
@inject HttpClient Http
@rendermode InteractiveServer

<h3>Games</h3>

@if (_games == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGame">Add Game</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Url Image</th>
                <th>Release Date</th>
                <th>Developer</th>
                <th>Publisher</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var game in _games)
        {
            <tr>
                <td>@game.Name</td>
                <td>@game.Url_Image</td>
                <td>@game.ReleaseDate.ToShortDateString()</td>
                <td>@game.Developer</td>
                <td>@game.Publisher</td>
                <td>@game.Price.ToString("C")</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => EditGame(game)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteGame(game.GameId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<div class="modal fade" id="addGame" tabindex="-1" aria-labelledby="addGameLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addGameLabel">Add Game</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="newGameDto" OnValidSubmit="HandleValidSubmit">
                    <div class="row">
                        <div class="col-md-8">
                            <InputText id="gameName" class="form-control" @bind-Value="newGameDto.Name" placeholder="Name" />
                            <InputDate id="releaseDate" class="form-control" @bind-Value="newGameDto.ReleaseDate" />
                            <InputText id="developer" class="form-control" @bind-Value="newGameDto.Developer" />
                            <InputText id="publisher" class="form-control" @bind-Value="newGameDto.Publisher" />
                            <InputTextArea id="description" class="form-control" @bind-Value="newGameDto.Description" />
                            <InputNumber id="price" class="form-control" @bind-Value="newGameDto.Price" />
                        </div>
                        
                        <div class="form-group">
                            <label for="fileInput">Game Picture:</label>
                            <InputFile id="fileInput" OnChange="HandleFileSelected" />
                        </div>
                    </div>
                    
                    <div class="col-md-8">
                        <!-- Checkboxes for selection -->
                        <label>Consoles</label>
                        @if (availableConsoles != null)
                        {
                            @foreach (var console in availableConsoles)
                            {
                                <div>
                                    <InputCheckbox @bind-Value="console.IsChecked" /> @console.Name
                                </div>
                            }
                        }
                        <label>Categories</label>
                        @if (availableCategories != null)
                        {
                            @foreach (var category in availableCategories)
                            {
                                <div>
                                    <InputCheckbox @bind-Value="category.IsChecked" /> @category.Name
                                </div>
                            }
                        }
                        <label>Genres</label>
                        @if (availableGenres != null)
                        {
                            @foreach (var genre in availableGenres)
                            {
                                <div>
                                    <InputCheckbox @bind-Value="genre.IsChecked" /> @genre.Name
                                </div>
                            }
                        }
                    </div>
                    
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Add Game</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GameDto>? _games;
    private GameDto newGameDto = new GameDto();

    List<SelectableItem>? availableConsoles;
    List<SelectableItem>? availableCategories;
    List<SelectableItem>? availableGenres;

    protected override async Task OnInitializedAsync()
    {
        _games = await Http.GetFromJsonAsync<List<GameDto>>("games");
        
        var consoles = await Http.GetFromJsonAsync<List<string>>("consoles");
        var categories = await Http.GetFromJsonAsync<List<string>>("categories");
        var genres = await Http.GetFromJsonAsync<List<string>>("genres");

        availableConsoles = consoles?.Select(c => new SelectableItem { Name = c, IsChecked = false }).ToList();
        availableCategories = categories?.Select(c => new SelectableItem { Name = c, IsChecked = false }).ToList();
        availableGenres = genres?.Select(g => new SelectableItem { Name = g, IsChecked = false }).ToList();
    }

    private async Task HandleValidSubmit()
    {
        
        newGameDto.ReleaseDate = newGameDto.ReleaseDate.ToUniversalTime();
        
        if (availableConsoles != null)
            newGameDto.Consoles = availableConsoles.Where(c => c.IsChecked).Select(c => Enum.Parse<Consoles>(c.Name)).ToList();
        if (availableCategories != null)
            newGameDto.Categories = availableCategories.Where(c => c.IsChecked).Select(c => Enum.Parse<Category>(c.Name)).ToList();
        if (availableGenres != null)
            newGameDto.Genres = availableGenres.Where(g => g.IsChecked).Select(g => Enum.Parse<Genre>(g.Name)).ToList();

        var response = await Http.PostAsJsonAsync("game", newGameDto);
        if (response.IsSuccessStatusCode)
        {
            _games?.Add(await response.Content.ReadFromJsonAsync<GameDto>());
            StateHasChanged();
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            newGameDto.Url_Image = file.Name;
        }
    }
    
    private async Task EditGame(GameDto game)
    {
        // Implementation depends on further details
    }

    private async Task DeleteGame(Guid id)
    {
        var response = await Http.DeleteAsync($"game/{id}");
        if (response.IsSuccessStatusCode)
        {
            _games = _games?.Where(g => g.GameId != id).ToList();
            StateHasChanged();
        }
    }

    public class SelectableItem
    {
        public string Name { get; set; }
        public bool IsChecked { get; set; }
    }
}
