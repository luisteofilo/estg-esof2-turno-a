@page "/Games"
@using ESOF.WebApp.DBLayer.Entities
@using ESOF.WebApp.DBLayer.Dto
@inject HttpClient Http
@rendermode InteractiveServer


<h3>Games</h3>

@if (_showSuccessMessageGame)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    Game created successfully.
    <button type="button" class="btn-close" @onclick="CloseSuccessMessage" aria-label="Close"></button>
</div>
}

@if (_showSuccessMessageDelete)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    Game deleted successfully.
    <button type="button" class="btn-close" @onclick="CloseSuccessMessageDelete" aria-label="Close"></button>
</div>
}

@if (_showSuccessMessageEdit)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        Game edited successfully.
        <button type="button" class="btn-close" @onclick="CloseSuccessMessageEdit" aria-label="Close"></button>
    </div>
}


@if (_games == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button type="button" class="btn btn-primary addbutton" data-bs-toggle="modal" data-bs-target="#addGame" @onclick="() => ModalGameOpen()">Add Game</button>
    
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Url Image</th>
            <th>Release Date</th>
            <th>Developer</th>
            <th>Publisher</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var game in _games)
        {
        <tr>
            <td>@game.Name</td>
            <td>@game.Url_Image</td>
            <td>@game.ReleaseDate.ToShortDateString()</td>
            <td>@game.Developer</td>
            <td>@game.Publisher</td>
            <td>@game.Price.ToString("C")</td>
            <td>
                <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#editGame" @onclick="() => OpenEditModal(game)">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteGame(game.GameId)">Delete</button>
            </td>
        </tr>
        }
        </tbody>
    </table>
}

@if (_modalGame)
{
    <div class="modal fade" id="addGame" tabindex="-1" aria-labelledby="addGameLabel" aria-hidden="true" >
    <div class="modal-dialog custom-modal-dialog">
        <div class="modal-content">
            
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addGameLabel">Add Game</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <EditForm Model="newGameDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-6 has-validation">
                            
                            <div class="form-floating">
                                <InputText id="gameName" class="form-control" @bind-Value="newGameDto.Name" placeholder="Name" required></InputText>
                                <label for="floatingTextarea">Name</label>
                            </div>
                            <ValidationMessage For="@(() => newGameDto.Name)" />
                            
                            <div class="form-floating">
                                <InputDate id="releaseDate" class="form-control" @bind-Value="newGameDto.ReleaseDate" required></InputDate>
                                <label for="floatingTextarea">Release Date</label>
                                <ValidationMessage For="@(() => newGameDto.ReleaseDate)" />
                            </div>

                            <div class="form-floating">
                                <InputText id="developer" class="form-control" @bind-Value="newGameDto.Developer" placeholder="Developer Name" required></InputText>
                                <label for="floatingTextarea">Developer Name</label>
                                <ValidationMessage For="@(() => newGameDto.Developer)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating">
                                <InputText id="publisher" class="form-control" @bind-Value="newGameDto.Publisher" placeholder="Publisher Name" required></InputText>
                                <label for="floatingTextarea">Publisher Name</label>
                                <ValidationMessage For="@(() => newGameDto.Publisher)" />
                            </div>
                            
                            <div class="form-floating">
                                <InputNumber id="price" class="form-control" @bind-Value="newGameDto.Price" placeholder="Price" required></InputNumber>
                                <label for="floatingTextarea">Price</label>
                                <ValidationMessage For="@(() => newGameDto.Price)" />
                            </div>
                            
                            <div class="form-floating">
                                <InputTextArea id="description" class="form-control" @bind-Value="newGameDto.Description" placeholder="Description" required></InputTextArea>
                                <label for="floatingTextarea">Description</label>
                                <ValidationMessage For="@(() => newGameDto.Description)" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group is-invalid">
                        <label for="fileInput">Game Picture:</label>
                        <InputFile id="fileInput" OnChange="HandleFileSelected"/>
                        <ValidationMessage For="@(() => newGameDto.Url_Image)" />
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <h4>Consoles</h4>
                            <div class="row">
                                @if (availableConsoles != null)
                                {
                                    @foreach (var console in availableConsoles)
                                    {
                                        <div class="col-md-2">
                                            <div>
                                                <InputCheckbox @bind-Value="console.IsChecked"/> @console.Name
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <ValidationMessage For="@(() => newGameDto.Consoles)" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <h4>Categories</h4>
                            <div class="row">
                                @if (availableCategories != null)
                                {
                                    @foreach (var category in availableCategories)
                                    {
                                        <div class="col-md-2">
                                            <div>
                                                <InputCheckbox @bind-Value="category.IsChecked"/> @category.Name
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <ValidationMessage For="@(() => newGameDto.Categories)" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <h4>Genres</h4>
                            <div class="row">
                                @if (availableGenres != null)
                                {
                                    @foreach (var genre in availableGenres)
                                    {
                                        <div class="col-md-2">
                                            <div>
                                                <InputCheckbox @bind-Value="genre.IsChecked"/> @genre.Name
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <ValidationMessage For="@(() => newGameDto.Genres)" />
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" @onclick="ValidateForm">Add Game</button>
                    </div>
                </EditForm>
                
            </div>
        </div>
    </div>
</div>
}


@code {
    private List<GameDto>? _games;
    private GameDto newGameDto = new GameDto();
    private GameDto editingGameDto = new GameDto();
    private bool _showSuccessMessageGame = false;
    private bool _showSuccessMessageDelete = false;
    private bool _showSuccessMessageEdit = false;
    private bool _modalGame = false;

    List<SelectableItem>? availableConsoles;
    List<SelectableItem>? availableCategories;
    List<SelectableItem>? availableGenres;

    private bool isValidForm = true;

    protected override async Task OnInitializedAsync()
    {
        _games = await Http.GetFromJsonAsync<List<GameDto>>("games");

        var consoles = await Http.GetFromJsonAsync<List<string>>("consoles");
        var categories = await Http.GetFromJsonAsync<List<string>>("categories");
        var genres = await Http.GetFromJsonAsync<List<string>>("genres");

        availableConsoles = consoles?.Select(c => new SelectableItem { Name = c, IsChecked = false }).ToList();
        availableCategories = categories?.Select(c => new SelectableItem { Name = c, IsChecked = false }).ToList();
        availableGenres = genres?.Select(g => new SelectableItem { Name = g, IsChecked = false }).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (!isValidForm)
        {
            return;
        }

        newGameDto.ReleaseDate = newGameDto.ReleaseDate.ToUniversalTime();

        if (availableConsoles != null)
            newGameDto.Consoles = availableConsoles.Where(c => c.IsChecked).Select(c => Enum.Parse<Consoles>(c.Name)).ToList();
        if (availableCategories != null)
            newGameDto.Categories = availableCategories.Where(c => c.IsChecked).Select(c => Enum.Parse<Category>(c.Name)).ToList();
        if (availableGenres != null)
            newGameDto.Genres = availableGenres.Where(g => g.IsChecked).Select(g => Enum.Parse<Genre>(g.Name)).ToList();

        var response = await Http.PostAsJsonAsync("game", newGameDto);
        if (response.IsSuccessStatusCode)
        {
            _games?.Add(await response.Content.ReadFromJsonAsync<GameDto>());
            _modalGame = false;
            _showSuccessMessageGame = true;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmitEdit()
    {
        if (!isValidForm)
        {
            return;
        }

        editingGameDto.ReleaseDate = editingGameDto.ReleaseDate.ToUniversalTime();

        if (availableConsoles != null)
            editingGameDto.Consoles = availableConsoles.Where(c => c.IsChecked).Select(c => Enum.Parse<Consoles>(c.Name)).ToList();
        if (availableCategories != null)
            editingGameDto.Categories = availableCategories.Where(c => c.IsChecked).Select(c => Enum.Parse<Category>(c.Name)).ToList();
        if (availableGenres != null)
            editingGameDto.Genres = availableGenres.Where(g => g.IsChecked).Select(g => Enum.Parse<Genre>(g.Name)).ToList();

        var response = await Http.PutAsJsonAsync($"game/{editingGameDto.GameId}", editingGameDto);
        if (response.IsSuccessStatusCode)
        {
            var updatedGame = await response.Content.ReadFromJsonAsync<GameDto>();
            var index = _games?.FindIndex(g => g.GameId == updatedGame.GameId);
            if (index != null && index >= 0)
            {
                _games[(int)index] = updatedGame;
            }
            StateHasChanged();
            _showSuccessMessageEdit = true;
        }
    }

    private void ModalGameOpen()
    {
        _modalGame = true;
    }
    
    private void CloseSuccessMessage()
    {
        _showSuccessMessageGame = false;
    }

    private void CloseSuccessMessageDelete()
    {
        _showSuccessMessageDelete = false;
    }

    private void CloseSuccessMessageEdit()
    {
        _showSuccessMessageEdit = false;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            newGameDto.Url_Image = file.Name;
        }
    }

    private void HandleFileSelectedEdit(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            editingGameDto.Url_Image = file.Name;
        }
    }

    private void ValidateForm()
    {
        isValidForm = !string.IsNullOrEmpty(newGameDto.Name) &&
                      !string.IsNullOrEmpty(newGameDto.Developer) &&
                      !string.IsNullOrEmpty(newGameDto.Publisher) &&
                      newGameDto.ReleaseDate != default &&
                      newGameDto.Price > 0 &&
                      (availableConsoles?.Any(c => c.IsChecked) == true ||
                       availableCategories?.Any(c => c.IsChecked) == true ||
                       availableGenres?.Any(g => g.IsChecked) == true);
    }

    private void ValidateFormEdit()
    {
        isValidForm = !string.IsNullOrEmpty(editingGameDto.Name) &&
                      !string.IsNullOrEmpty(editingGameDto.Developer) &&
                      !string.IsNullOrEmpty(editingGameDto.Publisher) &&
                      editingGameDto.ReleaseDate != default &&
                      editingGameDto.Price > 0 &&
                      (availableConsoles?.Any(c => c.IsChecked) == true ||
                       availableCategories?.Any(c => c.IsChecked) == true ||
                       availableGenres?.Any(g => g.IsChecked) == true);
    }

    private void OpenEditModal(GameDto game)
    {
        editingGameDto = game;
        foreach (var console in availableConsoles)
        {
            console.IsChecked = game.Consoles.Contains(Enum.Parse<Consoles>(console.Name));
        }
        foreach (var category in availableCategories)
        {
            category.IsChecked = game.Categories.Contains(Enum.Parse<Category>(category.Name));
        }
        foreach (var genre in availableGenres)
        {
            genre.IsChecked = game.Genres.Contains(Enum.Parse<Genre>(genre.Name));
        }
        StateHasChanged();
    }

    private async Task DeleteGame(Guid id)
    {
        var response = await Http.DeleteAsync($"game/{id}");
        if (response.IsSuccessStatusCode)
        {
            _games = _games?.Where(g => g.GameId != id).ToList();
            StateHasChanged();
            _showSuccessMessageDelete = true;
        }
    }

    public class SelectableItem
    {
        public string Name { get; set; }
        public bool IsChecked { get; set; }
    }
}
