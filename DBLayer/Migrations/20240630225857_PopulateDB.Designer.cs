// <auto-generated />
using System;
using ESOF.WebApp.DBLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESOF.WebApp.DBLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240630225857_PopulateDB")]
    partial class PopulateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Achievement", b =>
                {
                    b.Property<Guid>("IdAchievement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RequiredScore")
                        .HasColumnType("bigint");

                    b.HasKey("IdAchievement");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Comment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments", "gametok");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Favorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int[]>("Categories")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Consoles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DeveloperID")
                        .HasColumnType("uuid");

                    b.Property<int[]>("Genres")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url_Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GameId");

                    b.HasIndex("DeveloperID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.GameReplay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("VideoData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameReplays");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Like", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("Likes", "gametok");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.GameGenre", b =>
                {
                    b.Property<Guid>("game_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("genre_id")
                        .HasColumnType("uuid");

                    b.HasKey("game_id", "genre_id");

                    b.HasIndex("genre_id");

                    b.ToTable("GameGenres", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.GamePlatform", b =>
                {
                    b.Property<Guid>("platform_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("game_id")
                        .HasColumnType("uuid");

                    b.HasKey("platform_id");

                    b.ToTable("GamePlatforms", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.Genre", b =>
                {
                    b.Property<Guid>("genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("genre_id");

                    b.ToTable("Genres", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.MarketPlace_Game", b =>
                {
                    b.Property<Guid>("game_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("release_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("stock")
                        .HasColumnType("integer");

                    b.HasKey("game_id");

                    b.ToTable("Games", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.Order", b =>
                {
                    b.Property<Guid>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("completed")
                        .HasColumnType("boolean");

                    b.Property<string>("order_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("order_id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.OrderItem", b =>
                {
                    b.Property<Guid>("game_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("order_id")
                        .HasColumnType("uuid");

                    b.HasKey("game_id");

                    b.HasIndex("UserId");

                    b.HasIndex("order_id");

                    b.ToTable("OrderItems", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.OrderReview", b =>
                {
                    b.Property<Guid>("reviewer_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("order_id")
                        .HasColumnType("uuid");

                    b.Property<int>("rating")
                        .HasColumnType("integer");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("reviewer_id");

                    b.HasIndex("order_id");

                    b.ToTable("OrderReviews", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Platform", b =>
                {
                    b.Property<Guid>("platform_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("debut_year")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("platform_id");

                    b.ToTable("Platforms", "marketplace");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.PlayerAchievement", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Unlocked")
                        .HasColumnType("date");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("PlayerAchievements");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("ApprovedStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EditedStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WrittenReview")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Roms", b =>
                {
                    b.Property<Guid>("RomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("File_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("ROM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RomId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Roms");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SaveStates", b =>
                {
                    b.Property<Guid>("SaveStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SaveStateId");

                    b.HasIndex("RomId");

                    b.ToTable("SaveStates");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Shops", b =>
                {
                    b.Property<Guid>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameOfMonthId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("gameId")
                        .HasColumnType("uuid");

                    b.HasKey("ShopId");

                    b.HasIndex("GameId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunCategory", b =>
                {
                    b.Property<Guid>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("categoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("categoryRules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("creationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("gameID")
                        .HasColumnType("uuid");

                    b.HasKey("categoryID");

                    b.HasIndex("gameID");

                    b.ToTable("SpeedrunCategories");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunModerator", b =>
                {
                    b.Property<Guid>("moderatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("gameID")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("roleGivenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("moderatorID");

                    b.HasIndex("gameID");

                    b.HasIndex("userID");

                    b.ToTable("SpeedrunModerators");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunRun", b =>
                {
                    b.Property<Guid>("runID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("categoryID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("playerID")
                        .HasColumnType("uuid");

                    b.Property<int>("runTime")
                        .HasColumnType("integer");

                    b.Property<bool>("verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("verifierID")
                        .HasColumnType("uuid");

                    b.Property<string>("videoLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("runID");

                    b.HasIndex("categoryID");

                    b.HasIndex("playerID");

                    b.HasIndex("verifierID");

                    b.ToTable("SpeedrunRuns");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.TestUserScore", b =>
                {
                    b.Property<Guid>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ScoreId");

                    b.HasIndex("UserId");

                    b.ToTable("TestUserScores");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Video", b =>
                {
                    b.Property<Guid>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VideoQuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("VideoId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoQuestId");

                    b.ToTable("Videos", "gametok");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.VideoQuest", b =>
                {
                    b.Property<Guid>("VideoQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.HasKey("VideoQuestId");

                    b.HasIndex("GameId");

                    b.ToTable("VideoQuests", "gametok");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Comment", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Favorite", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithMany("Favorites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Game", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "Developer")
                        .WithMany("GamesDeveloped")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.GameReplay", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("UserGameReplays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Like", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.GameGenre", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.MarketPlace_Game", "MarketPlaceGame")
                        .WithMany("gameGenres")
                        .HasForeignKey("game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.Genre", "genre")
                        .WithMany("gameGenres")
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketPlaceGame");

                    b.Navigation("genre");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.GamePlatform", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.MarketPlace_Game", "MarketPlaceGame")
                        .WithMany("gamePlatforms")
                        .HasForeignKey("platform_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Platform", "platform")
                        .WithMany("gamePlatform")
                        .HasForeignKey("platform_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketPlaceGame");

                    b.Navigation("platform");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.Order", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.OrderItem", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", null)
                        .WithMany("UserOrderItems")
                        .HasForeignKey("UserId");

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.MarketPlace_Game", "MarketPlaceGame")
                        .WithMany("orderItems")
                        .HasForeignKey("game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.Order", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketPlaceGame");

                    b.Navigation("order");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.OrderReview", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Marketplace.Order", "order")
                        .WithMany("reviews")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "Reviewer")
                        .WithMany("UserOrderReviews")
                        .HasForeignKey("reviewer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.PlayerAchievement", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Achievement", "Achievement")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Review", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("id_game___fk");

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("id_user___fk");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.RolePermission", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Roms", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithOne("Roms")
                        .HasForeignKey("ESOF.WebApp.DBLayer.Entities.Roms", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SaveStates", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Roms", "Rom")
                        .WithMany("SaveStates")
                        .HasForeignKey("RomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rom");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Shops", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithMany("Shops")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunCategory", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithMany("speedrunCategories")
                        .HasForeignKey("gameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunModerator", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "game")
                        .WithMany("speedrunModerators")
                        .HasForeignKey("gameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "user")
                        .WithMany("speedrunModerators")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("game");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunRun", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.SpeedrunCategory", "category")
                        .WithMany("speedrunRuns")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "player")
                        .WithMany("speedrunRuns")
                        .HasForeignKey("playerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.SpeedrunModerator", "verifier")
                        .WithMany("SpeedRuns")
                        .HasForeignKey("verifierID");

                    b.Navigation("category");

                    b.Navigation("player");

                    b.Navigation("verifier");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.TestUserScore", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("TestUserScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.UserRole", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Video", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESOF.WebApp.DBLayer.Entities.VideoQuest", "VideoQuest")
                        .WithMany("Videos")
                        .HasForeignKey("VideoQuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VideoQuest");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.VideoQuest", b =>
                {
                    b.HasOne("ESOF.WebApp.DBLayer.Entities.Game", "Game")
                        .WithMany("VideoQuests")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Achievement", b =>
                {
                    b.Navigation("PlayerAchievements");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Game", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reviews");

                    b.Navigation("Roms")
                        .IsRequired();

                    b.Navigation("Shops");

                    b.Navigation("VideoQuests");

                    b.Navigation("speedrunCategories");

                    b.Navigation("speedrunModerators");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.Genre", b =>
                {
                    b.Navigation("gameGenres");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.MarketPlace_Game", b =>
                {
                    b.Navigation("gameGenres");

                    b.Navigation("gamePlatforms");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Marketplace.Order", b =>
                {
                    b.Navigation("orderItems");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Platform", b =>
                {
                    b.Navigation("gamePlatform");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Roms", b =>
                {
                    b.Navigation("SaveStates");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunCategory", b =>
                {
                    b.Navigation("speedrunRuns");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.SpeedrunModerator", b =>
                {
                    b.Navigation("SpeedRuns");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("GamesDeveloped");

                    b.Navigation("PlayerAchievements");

                    b.Navigation("Reviews");

                    b.Navigation("TestUserScores");

                    b.Navigation("UserGameReplays");

                    b.Navigation("UserOrderItems");

                    b.Navigation("UserOrderReviews");

                    b.Navigation("UserRoles");

                    b.Navigation("speedrunModerators");

                    b.Navigation("speedrunRuns");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ESOF.WebApp.DBLayer.Entities.VideoQuest", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
